{"file_contents":{"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/pages/login.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '@/lib/auth-context';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { Building2, Lock, User } from 'lucide-react';\nimport { useMutation } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport type { User as UserType } from '@shared/schema';\n\nexport default function Login() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const { login } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { username: string; password: string }) => {\n      return apiRequest<UserType>('POST', '/api/auth/login', credentials);\n    },\n    onSuccess: (user) => {\n      login(user);\n      toast({\n        title: 'Login successful',\n        description: `Welcome back, ${user.name}!`,\n      });\n      setLocation('/dashboard');\n    },\n    onError: (error: Error) => {\n      toast({\n        title: 'Login failed',\n        description: error.message,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!username || !password) {\n      toast({\n        title: 'Validation error',\n        description: 'Please enter both username and password',\n        variant: 'destructive',\n      });\n      return;\n    }\n    loginMutation.mutate({ username, password });\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 via-background to-primary/10 p-4\">\n      <Card className=\"w-full max-w-md shadow-lg\">\n        <CardHeader className=\"space-y-3 text-center pb-6\">\n          <div className=\"mx-auto w-16 h-16 bg-primary rounded-lg flex items-center justify-center mb-2\">\n            <Building2 className=\"w-8 h-8 text-primary-foreground\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold tracking-tight\">\n            CRM & Accounting\n          </CardTitle>\n          <CardDescription className=\"text-sm\">\n            Sign in to access your account\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\" className=\"text-sm font-medium\">\n                Username\n              </Label>\n              <div className=\"relative\">\n                <User className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  id=\"username\"\n                  type=\"text\"\n                  value={username}\n                  onChange={(e) => setUsername(e.target.value)}\n                  placeholder=\"Enter your username\"\n                  className=\"pl-10\"\n                  data-testid=\"input-username\"\n                  disabled={loginMutation.isPending}\n                />\n              </div>\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\" className=\"text-sm font-medium\">\n                Password\n              </Label>\n              <div className=\"relative\">\n                <Lock className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  placeholder=\"Enter your password\"\n                  className=\"pl-10\"\n                  data-testid=\"input-password\"\n                  disabled={loginMutation.isPending}\n                />\n              </div>\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full mt-6\" \n              size=\"lg\"\n              disabled={loginMutation.isPending}\n              data-testid=\"button-login\"\n            >\n              {loginMutation.isPending ? 'Signing in...' : 'Sign In'}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 p-4 bg-muted rounded-lg space-y-2\">\n            <p className=\"text-xs font-medium text-muted-foreground\">Demo Credentials:</p>\n            <div className=\"grid grid-cols-2 gap-2 text-xs\">\n              <div className=\"space-y-1\">\n                <p className=\"font-mono\">admin / admin123</p>\n                <p className=\"font-mono\">manager / manager123</p>\n                <p className=\"font-mono\">exec / exec123</p>\n              </div>\n              <div className=\"space-y-1\">\n                <p className=\"font-mono\">accountant / acc123</p>\n                <p className=\"font-mono\">engineer / eng123</p>\n                <p className=\"font-mono\">client / client123</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5198},"client/src/pages/dashboard.tsx":{"content":"import { useAuth } from '@/lib/auth-context';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useQuery } from '@tanstack/react-query';\nimport type { DashboardMetrics, Activity } from '@shared/schema';\nimport { \n  Users, \n  UserPlus, \n  FileText, \n  DollarSign, \n  Clock,\n  TrendingUp\n} from 'lucide-react';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Line, Bar, Pie } from 'react-chartjs-2';\nimport { format } from 'date-fns';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  ArcElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n\n  const { data: metrics, isLoading: metricsLoading } = useQuery<DashboardMetrics>({\n    queryKey: ['/api/dashboard/metrics'],\n  });\n\n  const { data: activities, isLoading: activitiesLoading } = useQuery<Activity[]>({\n    queryKey: ['/api/dashboard/activities'],\n  });\n\n  const canViewMetric = (metric: string) => {\n    if (!user) return false;\n    \n    if (user.role === 'admin') return true;\n    \n    const permissions: Record<string, string[]> = {\n      leads: ['manager', 'exec'],\n      clients: ['manager', 'exec'],\n      quotations: ['manager', 'exec', 'accountant'],\n      revenue: ['accountant'],\n      tickets: ['engineer'],\n    };\n    \n    return permissions[metric]?.includes(user.role) || false;\n  };\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  const summaryCards = [\n    {\n      title: 'Total Leads',\n      value: metrics?.totalLeads || 0,\n      icon: UserPlus,\n      visible: canViewMetric('leads'),\n      color: 'text-blue-600 dark:text-blue-400',\n      bgColor: 'bg-blue-100 dark:bg-blue-950',\n    },\n    {\n      title: 'Total Clients',\n      value: metrics?.totalClients || 0,\n      icon: Users,\n      visible: canViewMetric('clients'),\n      color: 'text-green-600 dark:text-green-400',\n      bgColor: 'bg-green-100 dark:bg-green-950',\n    },\n    {\n      title: 'Total Quotations',\n      value: metrics?.totalQuotations || 0,\n      icon: FileText,\n      visible: canViewMetric('quotations'),\n      color: 'text-purple-600 dark:text-purple-400',\n      bgColor: 'bg-purple-100 dark:bg-purple-950',\n    },\n    {\n      title: 'Total Revenue',\n      value: formatCurrency(metrics?.totalRevenue || 0),\n      icon: DollarSign,\n      visible: canViewMetric('revenue') || user?.role === 'admin',\n      color: 'text-emerald-600 dark:text-emerald-400',\n      bgColor: 'bg-emerald-100 dark:bg-emerald-950',\n    },\n    {\n      title: 'Pending Payments',\n      value: formatCurrency(metrics?.pendingPayments || 0),\n      icon: Clock,\n      visible: canViewMetric('revenue') || user?.role === 'admin',\n      color: 'text-amber-600 dark:text-amber-400',\n      bgColor: 'bg-amber-100 dark:bg-amber-950',\n    },\n  ];\n\n  const leadStatusData = metrics?.leadStatusDistribution ? {\n    labels: Object.keys(metrics.leadStatusDistribution),\n    datasets: [\n      {\n        data: Object.values(metrics.leadStatusDistribution),\n        backgroundColor: [\n          'rgb(59, 130, 246)',\n          'rgb(245, 158, 11)',\n          'rgb(34, 197, 94)',\n          'rgb(239, 68, 68)',\n        ],\n        borderWidth: 0,\n      },\n    ],\n  } : null;\n\n  const quotationStatusData = metrics?.quotationStatusDistribution ? {\n    labels: Object.keys(metrics.quotationStatusDistribution),\n    datasets: [\n      {\n        label: 'Quotations',\n        data: Object.values(metrics.quotationStatusDistribution),\n        backgroundColor: 'rgb(147, 51, 234)',\n        borderRadius: 6,\n      },\n    ],\n  } : null;\n\n  const revenueData = metrics?.monthlyRevenue ? {\n    labels: metrics.monthlyRevenue.map(m => m.month),\n    datasets: [\n      {\n        label: 'Revenue',\n        data: metrics.monthlyRevenue.map(m => m.revenue),\n        borderColor: 'rgb(34, 197, 94)',\n        backgroundColor: 'rgba(34, 197, 94, 0.1)',\n        tension: 0.4,\n        fill: true,\n      },\n    ],\n  } : null;\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-page-title\">\n          Dashboard\n        </h1>\n        <p className=\"text-sm text-muted-foreground mt-1\">\n          Welcome back, {user?.name}\n        </p>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4\">\n        {summaryCards.filter(card => card.visible).map((card) => (\n          <Card key={card.title} data-testid={`card-${card.title.toLowerCase().replace(/\\s+/g, '-')}`}>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                {card.title}\n              </CardTitle>\n              <div className={`w-10 h-10 rounded-lg ${card.bgColor} flex items-center justify-center`}>\n                <card.icon className={`w-5 h-5 ${card.color}`} />\n              </div>\n            </CardHeader>\n            <CardContent>\n              {metricsLoading ? (\n                <Skeleton className=\"h-8 w-20\" />\n              ) : (\n                <div className=\"text-2xl font-bold\" data-testid={`text-${card.title.toLowerCase().replace(/\\s+/g, '-')}-value`}>\n                  {card.value}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Lead Status Distribution */}\n        {(user?.role === 'admin' || ['manager', 'exec'].includes(user?.role || '')) && leadStatusData && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <TrendingUp className=\"w-5 h-5\" />\n                Lead Status Distribution\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64 flex items-center justify-center\">\n                {metricsLoading ? (\n                  <Skeleton className=\"w-full h-full rounded-lg\" />\n                ) : (\n                  <Pie \n                    data={leadStatusData} \n                    options={{\n                      responsive: true,\n                      maintainAspectRatio: false,\n                      plugins: {\n                        legend: {\n                          position: 'bottom' as const,\n                        },\n                      },\n                    }}\n                  />\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Quotation Status */}\n        {(user?.role === 'admin' || ['manager', 'exec', 'accountant'].includes(user?.role || '')) && quotationStatusData && (\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FileText className=\"w-5 h-5\" />\n                Quotation Status Breakdown\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64\">\n                {metricsLoading ? (\n                  <Skeleton className=\"w-full h-full rounded-lg\" />\n                ) : (\n                  <Bar \n                    data={quotationStatusData} \n                    options={{\n                      responsive: true,\n                      maintainAspectRatio: false,\n                      plugins: {\n                        legend: {\n                          display: false,\n                        },\n                      },\n                      scales: {\n                        y: {\n                          beginAtZero: true,\n                          ticks: {\n                            stepSize: 1,\n                          },\n                        },\n                      },\n                    }}\n                  />\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Monthly Revenue Trend */}\n        {(user?.role === 'admin' || user?.role === 'accountant') && revenueData && (\n          <Card className=\"lg:col-span-2\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <DollarSign className=\"w-5 h-5\" />\n                Monthly Revenue Trend\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64\">\n                {metricsLoading ? (\n                  <Skeleton className=\"w-full h-full rounded-lg\" />\n                ) : (\n                  <Line \n                    data={revenueData} \n                    options={{\n                      responsive: true,\n                      maintainAspectRatio: false,\n                      plugins: {\n                        legend: {\n                          display: false,\n                        },\n                      },\n                      scales: {\n                        y: {\n                          beginAtZero: true,\n                        },\n                      },\n                    }}\n                  />\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      {/* Recent Activities */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Activities</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {activitiesLoading ? (\n            <div className=\"space-y-3\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"flex items-center gap-3\">\n                  <Skeleton className=\"w-8 h-8 rounded-full\" />\n                  <div className=\"flex-1 space-y-2\">\n                    <Skeleton className=\"h-4 w-3/4\" />\n                    <Skeleton className=\"h-3 w-1/2\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : activities && activities.length > 0 ? (\n            <div className=\"space-y-4\">\n              {activities.slice(0, 10).map((activity) => (\n                <div key={activity.id} className=\"flex items-start gap-3 pb-3 border-b last:border-0\" data-testid={`activity-${activity.id}`}>\n                  <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0 mt-0.5\">\n                    <span className=\"text-xs font-semibold text-primary\">\n                      {activity.user.slice(0, 2).toUpperCase()}\n                    </span>\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <p className=\"text-sm\">\n                      <span className=\"font-medium\">{activity.user}</span>\n                      {' '}\n                      <span className=\"text-muted-foreground\">{activity.action}</span>\n                      {' '}\n                      <span className=\"font-medium\">{activity.entity}</span>\n                    </p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">\n                      {format(new Date(activity.timestamp), 'MMM d, yyyy h:mm a')}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <p className=\"text-sm text-muted-foreground\">No recent activities</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11724},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/auth-context.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { User } from '@shared/schema';\n\ninterface AuthContextType {\n  user: User | null;\n  login: (user: User) => void;\n  logout: () => void;\n  isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    const storedUser = localStorage.getItem('crm_user');\n    if (storedUser) {\n      try {\n        setUser(JSON.parse(storedUser));\n      } catch (e) {\n        localStorage.removeItem('crm_user');\n      }\n    }\n  }, []);\n\n  const login = (userData: User) => {\n    setUser(userData);\n    localStorage.setItem('crm_user', JSON.stringify(userData));\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('crm_user');\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout, isAuthenticated: !!user }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":1264},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"server/storage.ts":{"content":"import type { \n  User, InsertUser, Lead, InsertLead, LeadNote, Client, InsertClient,\n  Quotation, InsertQuotation, Invoice, InsertInvoice, Payment,\n  Ticket, InsertTicket, TicketNote, Activity, InsertActivity, DashboardMetrics\n} from '@shared/schema';\nimport bcrypt from 'bcrypt';\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getAllUsers(): Promise<User[]>;\n  \n  // Leads\n  getAllLeads(): Promise<Lead[]>;\n  getLead(id: number): Promise<Lead | undefined>;\n  createLead(lead: InsertLead): Promise<Lead>;\n  updateLead(id: number, lead: Partial<InsertLead>): Promise<Lead | undefined>;\n  deleteLead(id: number): Promise<boolean>;\n  addLeadNote(id: number, note: LeadNote): Promise<Lead | undefined>;\n  convertLeadToClient(leadId: number): Promise<Client | undefined>;\n  \n  // Clients\n  getAllClients(): Promise<Client[]>;\n  getClient(id: number): Promise<Client | undefined>;\n  createClient(client: InsertClient): Promise<Client>;\n  updateClient(id: number, client: Partial<InsertClient>): Promise<Client | undefined>;\n  deleteClient(id: number): Promise<boolean>;\n  updateClientRevenue(id: number, amount: number): Promise<void>;\n  \n  // Quotations\n  getAllQuotations(): Promise<Quotation[]>;\n  getQuotation(id: number): Promise<Quotation | undefined>;\n  createQuotation(quotation: InsertQuotation): Promise<Quotation>;\n  updateQuotation(id: number, quotation: Partial<InsertQuotation>): Promise<Quotation | undefined>;\n  approveQuotation(id: number, approvedBy: string): Promise<Quotation | undefined>;\n  rejectQuotation(id: number): Promise<Quotation | undefined>;\n  \n  // Invoices\n  getAllInvoices(): Promise<Invoice[]>;\n  getInvoice(id: number): Promise<Invoice | undefined>;\n  createInvoice(invoice: InsertInvoice): Promise<Invoice>;\n  updateInvoice(id: number, invoice: Partial<InsertInvoice>): Promise<Invoice | undefined>;\n  recordPayment(id: number, payment: Payment): Promise<Invoice | undefined>;\n  markInvoiceAsSent(id: number): Promise<Invoice | undefined>;\n  \n  // Tickets\n  getAllTickets(): Promise<Ticket[]>;\n  getTicket(id: number): Promise<Ticket | undefined>;\n  createTicket(ticket: InsertTicket): Promise<Ticket>;\n  updateTicket(id: number, ticket: Partial<InsertTicket>): Promise<Ticket | undefined>;\n  addTicketNote(id: number, note: TicketNote): Promise<Ticket | undefined>;\n  updateTicketStatus(id: number, status: Ticket['status']): Promise<Ticket | undefined>;\n  \n  // Activities\n  getAllActivities(): Promise<Activity[]>;\n  createActivity(activity: InsertActivity): Promise<Activity>;\n  \n  // Dashboard\n  getDashboardMetrics(): Promise<DashboardMetrics>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private leads: Map<number, Lead>;\n  private clients: Map<number, Client>;\n  private quotations: Map<number, Quotation>;\n  private invoices: Map<number, Invoice>;\n  private tickets: Map<number, Ticket>;\n  private activities: Map<number, Activity>;\n  \n  private leadIdCounter = 1;\n  private clientIdCounter = 1;\n  private quotationIdCounter = 1;\n  private invoiceIdCounter = 1;\n  private ticketIdCounter = 1;\n  private activityIdCounter = 1;\n\n  constructor() {\n    this.users = new Map();\n    this.leads = new Map();\n    this.clients = new Map();\n    this.quotations = new Map();\n    this.invoices = new Map();\n    this.tickets = new Map();\n    this.activities = new Map();\n    \n    this.initializeUsers();\n  }\n\n  private initializeUsers() {\n    const saltRounds = 10;\n    const defaultUsers: User[] = [\n      { id: '1', username: 'admin', password: bcrypt.hashSync('admin123', saltRounds), role: 'admin', name: 'Administrator' },\n      { id: '2', username: 'manager', password: bcrypt.hashSync('manager123', saltRounds), role: 'manager', name: 'Sales Manager' },\n      { id: '3', username: 'exec', password: bcrypt.hashSync('exec123', saltRounds), role: 'exec', name: 'Sales Executive' },\n      { id: '4', username: 'accountant', password: bcrypt.hashSync('acc123', saltRounds), role: 'accountant', name: 'Accountant' },\n      { id: '5', username: 'engineer', password: bcrypt.hashSync('eng123', saltRounds), role: 'engineer', name: 'Engineer' },\n      { id: '6', username: 'client', password: bcrypt.hashSync('client123', saltRounds), role: 'client', name: 'Client User' },\n    ];\n    \n    defaultUsers.forEach(user => this.users.set(user.id, user));\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = Date.now().toString();\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    const user: User = { ...insertUser, password: hashedPassword, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  // Leads\n  async getAllLeads(): Promise<Lead[]> {\n    return Array.from(this.leads.values()).sort((a, b) => \n      new Date(b.createdDate).getTime() - new Date(a.createdDate).getTime()\n    );\n  }\n\n  async getLead(id: number): Promise<Lead | undefined> {\n    return this.leads.get(id);\n  }\n\n  async createLead(lead: InsertLead): Promise<Lead> {\n    const id = this.leadIdCounter++;\n    const assignedToUser = await this.getUserByUsername(lead.assignedTo);\n    const newLead: Lead = {\n      ...lead,\n      id,\n      assignedToName: assignedToUser?.name || lead.assignedTo,\n      notes: lead.notes || [],\n      convertedToClientId: null,\n    };\n    this.leads.set(id, newLead);\n    await this.createActivity({\n      timestamp: new Date().toISOString(),\n      user: lead.assignedTo,\n      action: 'created lead',\n      entity: lead.name,\n      entityId: id,\n    });\n    return newLead;\n  }\n\n  async updateLead(id: number, leadUpdate: Partial<InsertLead>): Promise<Lead | undefined> {\n    const lead = this.leads.get(id);\n    if (!lead) return undefined;\n    \n    let assignedToName = lead.assignedToName;\n    if (leadUpdate.assignedTo) {\n      const user = await this.getUserByUsername(leadUpdate.assignedTo);\n      assignedToName = user?.name || leadUpdate.assignedTo;\n    }\n    \n    const updated: Lead = {\n      ...lead,\n      ...leadUpdate,\n      assignedToName,\n    };\n    this.leads.set(id, updated);\n    return updated;\n  }\n\n  async deleteLead(id: number): Promise<boolean> {\n    return this.leads.delete(id);\n  }\n\n  async addLeadNote(id: number, note: LeadNote): Promise<Lead | undefined> {\n    const lead = this.leads.get(id);\n    if (!lead) return undefined;\n    \n    lead.notes.push(note);\n    this.leads.set(id, lead);\n    return lead;\n  }\n\n  async convertLeadToClient(leadId: number): Promise<Client | undefined> {\n    const lead = this.leads.get(leadId);\n    if (!lead) return undefined;\n    \n    const client = await this.createClient({\n      name: lead.name,\n      email: lead.email,\n      phone: lead.phone,\n      company: lead.company,\n      address: '',\n      createdDate: new Date().toISOString().split('T')[0],\n      leadId,\n    });\n    \n    lead.status = 'Converted';\n    lead.convertedToClientId = client.id;\n    this.leads.set(leadId, lead);\n    \n    await this.createActivity({\n      timestamp: new Date().toISOString(),\n      user: lead.assignedTo,\n      action: 'converted lead to client',\n      entity: lead.name,\n      entityId: leadId,\n    });\n    \n    return client;\n  }\n\n  // Clients\n  async getAllClients(): Promise<Client[]> {\n    return Array.from(this.clients.values()).sort((a, b) => \n      new Date(b.createdDate).getTime() - new Date(a.createdDate).getTime()\n    );\n  }\n\n  async getClient(id: number): Promise<Client | undefined> {\n    return this.clients.get(id);\n  }\n\n  async createClient(client: InsertClient): Promise<Client> {\n    const id = this.clientIdCounter++;\n    const newClient: Client = {\n      ...client,\n      id,\n      totalRevenue: client.totalRevenue || 0,\n    };\n    this.clients.set(id, newClient);\n    await this.createActivity({\n      timestamp: new Date().toISOString(),\n      user: 'system',\n      action: 'created client',\n      entity: client.name,\n      entityId: id,\n    });\n    return newClient;\n  }\n\n  async updateClient(id: number, clientUpdate: Partial<InsertClient>): Promise<Client | undefined> {\n    const client = this.clients.get(id);\n    if (!client) return undefined;\n    \n    const updated: Client = {\n      ...client,\n      ...clientUpdate,\n    };\n    this.clients.set(id, updated);\n    await this.createActivity({\n      timestamp: new Date().toISOString(),\n      user: 'system',\n      action: 'updated client',\n      entity: client.company,\n      entityId: id,\n    });\n    return updated;\n  }\n\n  async deleteClient(id: number): Promise<boolean> {\n    const client = this.clients.get(id);\n    if (client) {\n      await this.createActivity({\n        timestamp: new Date().toISOString(),\n        user: 'system',\n        action: 'deleted client',\n        entity: client.company,\n        entityId: id,\n      });\n    }\n    return this.clients.delete(id);\n  }\n\n  async updateClientRevenue(id: number, amount: number): Promise<void> {\n    const client = this.clients.get(id);\n    if (client) {\n      client.totalRevenue += amount;\n      this.clients.set(id, client);\n    }\n  }\n\n  // Quotations\n  async getAllQuotations(): Promise<Quotation[]> {\n    return Array.from(this.quotations.values()).sort((a, b) => \n      new Date(b.createdDate).getTime() - new Date(a.createdDate).getTime()\n    );\n  }\n\n  async getQuotation(id: number): Promise<Quotation | undefined> {\n    return this.quotations.get(id);\n  }\n\n  async createQuotation(quotation: InsertQuotation): Promise<Quotation> {\n    const id = this.quotationIdCounter++;\n    const client = await this.getClient(quotation.clientId);\n    const createdByUser = await this.getUserByUsername(quotation.createdBy);\n    \n    const subtotal = quotation.items.reduce((sum, item) => sum + item.amount, 0);\n    const taxAmount = subtotal * (quotation.taxRate / 100);\n    const total = subtotal + taxAmount;\n    \n    const quotationNumber = `QT-${new Date().getFullYear()}-${String(id).padStart(3, '0')}`;\n    \n    const newQuotation: Quotation = {\n      ...quotation,\n      id,\n      quotationNumber,\n      clientName: client?.company || '',\n      subtotal,\n      taxAmount,\n      total,\n      createdByName: createdByUser?.name || quotation.createdBy,\n      approvedBy: null,\n      approvedDate: null,\n    };\n    this.quotations.set(id, newQuotation);\n    \n    await this.createActivity({\n      timestamp: new Date().toISOString(),\n      user: quotation.createdBy,\n      action: 'created quotation',\n      entity: quotationNumber,\n      entityId: id,\n    });\n    \n    return newQuotation;\n  }\n\n  async updateQuotation(id: number, quotationUpdate: Partial<InsertQuotation>): Promise<Quotation | undefined> {\n    const quotation = this.quotations.get(id);\n    if (!quotation) return undefined;\n    \n    let clientName = quotation.clientName;\n    if (quotationUpdate.clientId) {\n      const client = await this.getClient(quotationUpdate.clientId);\n      clientName = client?.company || '';\n    }\n    \n    const items = quotationUpdate.items || quotation.items;\n    const subtotal = items.reduce((sum, item) => sum + item.amount, 0);\n    const taxRate = quotationUpdate.taxRate || quotation.taxRate;\n    const taxAmount = subtotal * (taxRate / 100);\n    const total = subtotal + taxAmount;\n    \n    const updated: Quotation = {\n      ...quotation,\n      ...quotationUpdate,\n      clientName,\n      subtotal,\n      taxAmount,\n      total,\n    };\n    this.quotations.set(id, updated);\n    return updated;\n  }\n\n  async approveQuotation(id: number, approvedBy: string): Promise<Quotation | undefined> {\n    const quotation = this.quotations.get(id);\n    if (!quotation) return undefined;\n    \n    quotation.status = 'Approved';\n    quotation.approvedBy = approvedBy;\n    quotation.approvedDate = new Date().toISOString().split('T')[0];\n    this.quotations.set(id, quotation);\n    \n    await this.createActivity({\n      timestamp: new Date().toISOString(),\n      user: approvedBy,\n      action: 'approved quotation',\n      entity: quotation.quotationNumber,\n      entityId: id,\n    });\n    \n    return quotation;\n  }\n\n  async rejectQuotation(id: number): Promise<Quotation | undefined> {\n    const quotation = this.quotations.get(id);\n    if (!quotation) return undefined;\n    \n    quotation.status = 'Rejected';\n    this.quotations.set(id, quotation);\n    return quotation;\n  }\n\n  // Invoices\n  async getAllInvoices(): Promise<Invoice[]> {\n    return Array.from(this.invoices.values()).sort((a, b) => \n      new Date(b.generatedDate).getTime() - new Date(a.generatedDate).getTime()\n    );\n  }\n\n  async getInvoice(id: number): Promise<Invoice | undefined> {\n    return this.invoices.get(id);\n  }\n\n  async createInvoice(invoice: InsertInvoice): Promise<Invoice> {\n    const id = this.invoiceIdCounter++;\n    const client = await this.getClient(invoice.clientId);\n    const quotation = await this.getQuotation(invoice.quotationId);\n    \n    const invoiceNumber = `INV-${new Date().getFullYear()}-${String(id).padStart(3, '0')}`;\n    \n    const newInvoice: Invoice = {\n      ...invoice,\n      id,\n      invoiceNumber,\n      clientName: client?.company || '',\n      clientAddress: client?.address || '',\n      items: quotation?.items || invoice.items,\n      subtotal: quotation?.subtotal || 0,\n      taxAmount: quotation?.taxAmount || 0,\n      total: quotation?.total || 0,\n      sentDate: null,\n      paidDate: null,\n      paymentMethod: null,\n      transactionRef: null,\n    };\n    this.invoices.set(id, newInvoice);\n    \n    await this.createActivity({\n      timestamp: new Date().toISOString(),\n      user: 'system',\n      action: 'generated invoice',\n      entity: invoiceNumber,\n      entityId: id,\n    });\n    \n    return newInvoice;\n  }\n\n  async updateInvoice(id: number, invoiceUpdate: Partial<InsertInvoice>): Promise<Invoice | undefined> {\n    const invoice = this.invoices.get(id);\n    if (!invoice) return undefined;\n    \n    const updated: Invoice = {\n      ...invoice,\n      ...invoiceUpdate,\n    };\n    this.invoices.set(id, updated);\n    return updated;\n  }\n\n  async recordPayment(id: number, payment: Payment): Promise<Invoice | undefined> {\n    const invoice = this.invoices.get(id);\n    if (!invoice) return undefined;\n    \n    invoice.paidAmount += payment.paymentAmount;\n    invoice.paidDate = payment.paymentDate;\n    invoice.paymentMethod = payment.paymentMethod;\n    invoice.transactionRef = payment.transactionRef;\n    \n    if (invoice.paidAmount >= invoice.total) {\n      invoice.status = 'Paid';\n      await this.updateClientRevenue(invoice.clientId, invoice.total);\n    } else if (invoice.paidAmount > 0) {\n      invoice.status = 'Partially Paid';\n    }\n    \n    this.invoices.set(id, invoice);\n    \n    await this.createActivity({\n      timestamp: new Date().toISOString(),\n      user: 'system',\n      action: 'recorded payment for invoice',\n      entity: invoice.invoiceNumber,\n      entityId: id,\n    });\n    \n    return invoice;\n  }\n\n  async markInvoiceAsSent(id: number): Promise<Invoice | undefined> {\n    const invoice = this.invoices.get(id);\n    if (!invoice) return undefined;\n    \n    invoice.status = 'Sent';\n    invoice.sentDate = new Date().toISOString().split('T')[0];\n    this.invoices.set(id, invoice);\n    return invoice;\n  }\n\n  // Tickets\n  async getAllTickets(): Promise<Ticket[]> {\n    return Array.from(this.tickets.values()).sort((a, b) => \n      new Date(b.createdDate).getTime() - new Date(a.createdDate).getTime()\n    );\n  }\n\n  async getTicket(id: number): Promise<Ticket | undefined> {\n    return this.tickets.get(id);\n  }\n\n  async createTicket(ticket: InsertTicket): Promise<Ticket> {\n    const id = this.ticketIdCounter++;\n    const client = await this.getClient(ticket.clientId);\n    const assignedToUser = await this.getUserByUsername(ticket.assignedTo);\n    \n    const ticketNumber = `TKT-${new Date().getFullYear()}-${String(id).padStart(3, '0')}`;\n    \n    const newTicket: Ticket = {\n      ...ticket,\n      id,\n      ticketNumber,\n      clientName: client?.company || '',\n      assignedToName: assignedToUser?.name || ticket.assignedTo,\n      notes: ticket.notes || [],\n      resolvedDate: null,\n      closedDate: null,\n    };\n    this.tickets.set(id, newTicket);\n    \n    await this.createActivity({\n      timestamp: new Date().toISOString(),\n      user: ticket.createdBy,\n      action: 'created ticket',\n      entity: ticketNumber,\n      entityId: id,\n    });\n    \n    return newTicket;\n  }\n\n  async updateTicket(id: number, ticketUpdate: Partial<InsertTicket>): Promise<Ticket | undefined> {\n    const ticket = this.tickets.get(id);\n    if (!ticket) return undefined;\n    \n    let assignedToName = ticket.assignedToName;\n    if (ticketUpdate.assignedTo) {\n      const user = await this.getUserByUsername(ticketUpdate.assignedTo);\n      assignedToName = user?.name || ticketUpdate.assignedTo;\n    }\n    \n    const updated: Ticket = {\n      ...ticket,\n      ...ticketUpdate,\n      assignedToName,\n    };\n    this.tickets.set(id, updated);\n    return updated;\n  }\n\n  async addTicketNote(id: number, note: TicketNote): Promise<Ticket | undefined> {\n    const ticket = this.tickets.get(id);\n    if (!ticket) return undefined;\n    \n    ticket.notes.push(note);\n    this.tickets.set(id, ticket);\n    return ticket;\n  }\n\n  async updateTicketStatus(id: number, status: Ticket['status']): Promise<Ticket | undefined> {\n    const ticket = this.tickets.get(id);\n    if (!ticket) return undefined;\n    \n    ticket.status = status;\n    if (status === 'Resolved' && !ticket.resolvedDate) {\n      ticket.resolvedDate = new Date().toISOString().split('T')[0];\n    }\n    if (status === 'Closed' && !ticket.closedDate) {\n      ticket.closedDate = new Date().toISOString().split('T')[0];\n    }\n    this.tickets.set(id, ticket);\n    return ticket;\n  }\n\n  // Activities\n  async getAllActivities(): Promise<Activity[]> {\n    return Array.from(this.activities.values())\n      .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())\n      .slice(0, 50);\n  }\n\n  async createActivity(activity: InsertActivity): Promise<Activity> {\n    const id = this.activityIdCounter++;\n    const newActivity: Activity = { ...activity, id };\n    this.activities.set(id, newActivity);\n    return newActivity;\n  }\n\n  // Dashboard\n  async getDashboardMetrics(): Promise<DashboardMetrics> {\n    const leads = await this.getAllLeads();\n    const clients = await this.getAllClients();\n    const quotations = await this.getAllQuotations();\n    const invoices = await this.getAllInvoices();\n    \n    const paidInvoices = invoices.filter(inv => inv.status === 'Paid');\n    const totalRevenue = paidInvoices.reduce((sum, inv) => sum + inv.total, 0);\n    \n    const unpaidInvoices = invoices.filter(inv => inv.status !== 'Paid');\n    const pendingPayments = unpaidInvoices.reduce((sum, inv) => sum + (inv.total - inv.paidAmount), 0);\n    \n    const leadStatusDistribution = {\n      'New': leads.filter(l => l.status === 'New').length,\n      'In Progress': leads.filter(l => l.status === 'In Progress').length,\n      'Converted': leads.filter(l => l.status === 'Converted').length,\n      'Lost': leads.filter(l => l.status === 'Lost').length,\n    };\n    \n    const quotationStatusDistribution = {\n      'Draft': quotations.filter(q => q.status === 'Draft').length,\n      'Pending': quotations.filter(q => q.status === 'Pending').length,\n      'Approved': quotations.filter(q => q.status === 'Approved').length,\n      'Rejected': quotations.filter(q => q.status === 'Rejected').length,\n    };\n    \n    const monthlyRevenue = this.calculateMonthlyRevenue(paidInvoices);\n    \n    return {\n      totalLeads: leads.length,\n      totalClients: clients.length,\n      totalQuotations: quotations.length,\n      totalRevenue,\n      pendingPayments,\n      leadStatusDistribution,\n      quotationStatusDistribution,\n      monthlyRevenue,\n    };\n  }\n\n  private calculateMonthlyRevenue(paidInvoices: Invoice[]): { month: string; revenue: number }[] {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    const currentDate = new Date();\n    const monthlyData: { month: string; revenue: number }[] = [];\n    \n    for (let i = 5; i >= 0; i--) {\n      const date = new Date(currentDate.getFullYear(), currentDate.getMonth() - i, 1);\n      const monthName = months[date.getMonth()];\n      const year = date.getFullYear();\n      const monthKey = `${year}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n      \n      const revenue = paidInvoices\n        .filter(inv => inv.paidDate && inv.paidDate.startsWith(monthKey))\n        .reduce((sum, inv) => sum + inv.total, 0);\n      \n      monthlyData.push({ month: monthName, revenue });\n    }\n    \n    return monthlyData;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":21125},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useEffect, useState } from 'react';\n\nexport function ThemeToggle() {\n  const [theme, setTheme] = useState<'light' | 'dark'>('light');\n\n  useEffect(() => {\n    const stored = localStorage.getItem('theme') as 'light' | 'dark' | null;\n    const initialTheme = stored || 'light';\n    setTheme(initialTheme);\n    document.documentElement.classList.toggle('dark', initialTheme === 'dark');\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n    document.documentElement.classList.toggle('dark', newTheme === 'dark');\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n      className=\"hover-elevate active-elevate-2\"\n    >\n      {theme === 'light' ? (\n        <Moon className=\"w-4 h-4\" />\n      ) : (\n        <Sun className=\"w-4 h-4\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":1117},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { initializeSampleData } from \"./init-data\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Initialize sample data\n  await initializeSampleData();\n\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2323},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/pages/quotations/list.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '@/lib/auth-context';\nimport type { Quotation } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { StatusBadge } from '@/components/ui/status-badge';\nimport { Plus, Eye, Pencil, Check, X } from 'lucide-react';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { format } from 'date-fns';\nimport { canApproveQuotations } from '@/lib/role-permissions';\n\nexport default function QuotationsList() {\n  const [, setLocation] = useLocation();\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const { data: quotations, isLoading } = useQuery<Quotation[]>({\n    queryKey: ['/api/quotations'],\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return apiRequest('POST', `/api/quotations/${id}/approve`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/quotations'] });\n      toast({\n        title: 'Quotation approved',\n        description: 'Quotation has been successfully approved.',\n      });\n    },\n  });\n\n  const rejectMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return apiRequest('POST', `/api/quotations/${id}/reject`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/quotations'] });\n      toast({\n        title: 'Quotation rejected',\n        description: 'Quotation has been rejected.',\n      });\n    },\n  });\n\n  const filteredQuotations = quotations?.filter((quotation) => {\n    const matchesStatus = statusFilter === 'all' || quotation.status === statusFilter;\n    return matchesStatus;\n  }) || [];\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-page-title\">Quotations</h1>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Manage and track quotations\n          </p>\n        </div>\n        {['admin', 'manager', 'exec'].includes(user?.role || '') && (\n          <Button onClick={() => setLocation('/quotations/new')} data-testid=\"button-create-quotation\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            New Quotation\n          </Button>\n        )}\n      </div>\n\n      <Card>\n        <CardHeader>\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-full md:w-48\" data-testid=\"select-status-filter\">\n              <SelectValue placeholder=\"Filter by status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Statuses</SelectItem>\n              <SelectItem value=\"Draft\">Draft</SelectItem>\n              <SelectItem value=\"Pending\">Pending</SelectItem>\n              <SelectItem value=\"Approved\">Approved</SelectItem>\n              <SelectItem value=\"Rejected\">Rejected</SelectItem>\n            </SelectContent>\n          </Select>\n        </CardHeader>\n        <CardContent>\n          <div className=\"border rounded-lg\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Quotation #</TableHead>\n                  <TableHead>Client</TableHead>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Amount</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Created By</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {isLoading ? (\n                  [...Array(5)].map((_, i) => (\n                    <TableRow key={i}>\n                      <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-32\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-5 w-20\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-8 w-32 ml-auto\" /></TableCell>\n                    </TableRow>\n                  ))\n                ) : filteredQuotations.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center py-12\">\n                      <p className=\"text-sm text-muted-foreground\">No quotations found</p>\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredQuotations.map((quotation) => (\n                    <TableRow key={quotation.id} data-testid={`row-quotation-${quotation.id}`}>\n                      <TableCell className=\"font-mono font-medium text-sm\">{quotation.quotationNumber}</TableCell>\n                      <TableCell>{quotation.clientName}</TableCell>\n                      <TableCell className=\"text-sm text-muted-foreground\">\n                        {format(new Date(quotation.createdDate), 'MMM d, yyyy')}\n                      </TableCell>\n                      <TableCell className=\"font-semibold\">{formatCurrency(quotation.total)}</TableCell>\n                      <TableCell>\n                        <StatusBadge status={quotation.status} type=\"quotation\" />\n                      </TableCell>\n                      <TableCell className=\"text-sm\">{quotation.createdByName}</TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center justify-end gap-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => setLocation(`/quotations/${quotation.id}`)}\n                            data-testid={`button-view-${quotation.id}`}\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          {quotation.status === 'Draft' && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              onClick={() => setLocation(`/quotations/${quotation.id}/edit`)}\n                              data-testid={`button-edit-${quotation.id}`}\n                            >\n                              <Pencil className=\"w-4 h-4\" />\n                            </Button>\n                          )}\n                          {quotation.status === 'Pending' && canApproveQuotations(user) && (\n                            <>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                onClick={() => approveMutation.mutate(quotation.id)}\n                                data-testid={`button-approve-${quotation.id}`}\n                              >\n                                <Check className=\"w-4 h-4 text-green-600\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                onClick={() => rejectMutation.mutate(quotation.id)}\n                                data-testid={`button-reject-${quotation.id}`}\n                              >\n                                <X className=\"w-4 h-4 text-red-600\" />\n                              </Button>\n                            </>\n                          )}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8679},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/pages/leads/form.tsx":{"content":"import { useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useLocation, useParams } from 'wouter';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { insertLeadSchema, type InsertLead, type Lead } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { ArrowLeft } from 'lucide-react';\n\nexport default function LeadForm() {\n  const params = useParams();\n  const leadId = params.id ? parseInt(params.id) : null;\n  const isEditing = leadId !== null;\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const { data: lead, isLoading } = useQuery<Lead>({\n    queryKey: ['/api/leads', leadId],\n    enabled: isEditing,\n  });\n\n  const form = useForm<InsertLead>({\n    resolver: zodResolver(insertLeadSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      phone: '',\n      company: '',\n      source: 'Website',\n      status: 'New',\n      assignedTo: 'exec',\n      createdDate: new Date().toISOString().split('T')[0],\n    },\n  });\n\n  useEffect(() => {\n    if (lead && isEditing) {\n      form.reset({\n        name: lead.name,\n        email: lead.email,\n        phone: lead.phone,\n        company: lead.company,\n        source: lead.source,\n        status: lead.status,\n        assignedTo: lead.assignedTo,\n        createdDate: lead.createdDate,\n      });\n    }\n  }, [lead, isEditing, form]);\n\n  const saveMutation = useMutation({\n    mutationFn: async (data: InsertLead) => {\n      if (isEditing) {\n        return apiRequest('PATCH', `/api/leads/${leadId}`, data);\n      }\n      return apiRequest('POST', '/api/leads', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/leads'] });\n      toast({\n        title: isEditing ? 'Lead updated' : 'Lead created',\n        description: `Lead has been successfully ${isEditing ? 'updated' : 'created'}.`,\n      });\n      setLocation('/leads');\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: `Failed to ${isEditing ? 'update' : 'create'} lead.`,\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertLead) => {\n    saveMutation.mutate(data);\n  };\n\n  if (isLoading && isEditing) {\n    return <div className=\"flex items-center justify-center min-h-[400px]\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <Button variant=\"ghost\" size=\"icon\" onClick={() => setLocation('/leads')} data-testid=\"button-back\">\n          <ArrowLeft className=\"w-4 h-4\" />\n        </Button>\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-page-title\">\n            {isEditing ? 'Edit Lead' : 'New Lead'}\n          </h1>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            {isEditing ? 'Update lead information' : 'Add a new lead to the system'}\n          </p>\n        </div>\n      </div>\n\n      <Card className=\"max-w-3xl\">\n        <CardHeader>\n          <CardTitle>Lead Information</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Name *</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"John Doe\" data-testid=\"input-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"company\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Company *</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"ABC Corp\" data-testid=\"input-company\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email *</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"email\" placeholder=\"john@example.com\" data-testid=\"input-email\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone *</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"+1234567890\" data-testid=\"input-phone\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"source\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Source</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-source\">\n                            <SelectValue placeholder=\"Select source\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"Website\">Website</SelectItem>\n                          <SelectItem value=\"Referral\">Referral</SelectItem>\n                          <SelectItem value=\"Cold Call\">Cold Call</SelectItem>\n                          <SelectItem value=\"Social Media\">Social Media</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"status\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Status</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-status\">\n                            <SelectValue placeholder=\"Select status\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"New\">New</SelectItem>\n                          <SelectItem value=\"In Progress\">In Progress</SelectItem>\n                          <SelectItem value=\"Converted\">Converted</SelectItem>\n                          <SelectItem value=\"Lost\">Lost</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"assignedTo\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Assign To</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-assigned-to\">\n                            <SelectValue placeholder=\"Select user\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"exec\">Sales Executive</SelectItem>\n                          <SelectItem value=\"manager\">Sales Manager</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"flex items-center gap-3 justify-end pt-4 border-t\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setLocation('/leads')}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={saveMutation.isPending} data-testid=\"button-save\">\n                  {saveMutation.isPending ? 'Saving...' : isEditing ? 'Update Lead' : 'Create Lead'}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9775},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/pages/leads/detail.tsx":{"content":"import { useState } from 'react';\nimport { useParams, useLocation } from 'wouter';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport type { Lead } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { StatusBadge } from '@/components/ui/status-badge';\nimport { Textarea } from '@/components/ui/textarea';\nimport { ArrowLeft, UserCheck, Plus } from 'lucide-react';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { format } from 'date-fns';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\n\nexport default function LeadDetail() {\n  const params = useParams();\n  const leadId = parseInt(params.id!);\n  const [, setLocation] = useLocation();\n  const [newNote, setNewNote] = useState('');\n  const [showConvertDialog, setShowConvertDialog] = useState(false);\n  const { toast } = useToast();\n\n  const { data: lead, isLoading } = useQuery<Lead>({\n    queryKey: ['/api/leads', leadId],\n  });\n\n  const addNoteMutation = useMutation({\n    mutationFn: async (note: string) => {\n      return apiRequest('POST', `/api/leads/${leadId}/notes`, { text: note });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/leads', leadId] });\n      setNewNote('');\n      toast({\n        title: 'Note added',\n        description: 'Your note has been successfully added.',\n      });\n    },\n  });\n\n  const convertMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest('POST', `/api/leads/${leadId}/convert`, undefined);\n    },\n    onSuccess: (client: any) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/leads'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/clients'] });\n      toast({\n        title: 'Lead converted',\n        description: 'Lead has been successfully converted to a client.',\n      });\n      setLocation(`/clients/${client.id}`);\n    },\n  });\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center min-h-[400px]\">Loading...</div>;\n  }\n\n  if (!lead) {\n    return <div className=\"text-center py-12\">Lead not found</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <Button variant=\"ghost\" size=\"icon\" onClick={() => setLocation('/leads')} data-testid=\"button-back\">\n          <ArrowLeft className=\"w-4 h-4\" />\n        </Button>\n        <div className=\"flex-1\">\n          <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-lead-name\">{lead.name}</h1>\n          <p className=\"text-sm text-muted-foreground mt-1\">{lead.company}</p>\n        </div>\n        {lead.status !== 'Converted' && (\n          <Button onClick={() => setShowConvertDialog(true)} data-testid=\"button-convert\">\n            <UserCheck className=\"w-4 h-4 mr-2\" />\n            Convert to Client\n          </Button>\n        )}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <div className=\"lg:col-span-2 space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Lead Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Email</p>\n                  <p className=\"text-sm mt-1\" data-testid=\"text-email\">{lead.email}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Phone</p>\n                  <p className=\"text-sm mt-1\" data-testid=\"text-phone\">{lead.phone}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Source</p>\n                  <p className=\"text-sm mt-1\" data-testid=\"text-source\">{lead.source}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Status</p>\n                  <div className=\"mt-1\">\n                    <StatusBadge status={lead.status} type=\"lead\" />\n                  </div>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Assigned To</p>\n                  <p className=\"text-sm mt-1\" data-testid=\"text-assigned-to\">{lead.assignedToName}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Created Date</p>\n                  <p className=\"text-sm mt-1\" data-testid=\"text-created-date\">\n                    {format(new Date(lead.createdDate), 'MMM d, yyyy')}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Activity Timeline</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {lead.notes.map((note, index) => (\n                  <div key={index} className=\"flex gap-3 pb-4 border-b last:border-0\" data-testid={`note-${index}`}>\n                    <div className=\"w-2 h-2 rounded-full bg-primary mt-2 flex-shrink-0\" />\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm\">{note.text}</p>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {note.user} • {format(new Date(note.timestamp), 'MMM d, yyyy h:mm a')}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n                {lead.notes.length === 0 && (\n                  <p className=\"text-sm text-muted-foreground text-center py-6\">No notes yet</p>\n                )}\n              </div>\n\n              <div className=\"mt-6 pt-6 border-t space-y-3\">\n                <Textarea\n                  placeholder=\"Add a follow-up note...\"\n                  value={newNote}\n                  onChange={(e) => setNewNote(e.target.value)}\n                  rows={3}\n                  data-testid=\"textarea-new-note\"\n                />\n                <Button\n                  onClick={() => newNote && addNoteMutation.mutate(newNote)}\n                  disabled={!newNote || addNoteMutation.isPending}\n                  size=\"sm\"\n                  data-testid=\"button-add-note\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Note\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div>\n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Actions</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              <Button\n                variant=\"outline\"\n                className=\"w-full justify-start\"\n                onClick={() => setLocation(`/leads/${leadId}/edit`)}\n                data-testid=\"button-edit\"\n              >\n                Edit Lead\n              </Button>\n              {lead.status !== 'Converted' && (\n                <Button\n                  variant=\"outline\"\n                  className=\"w-full justify-start\"\n                  onClick={() => setShowConvertDialog(true)}\n                  data-testid=\"button-quick-convert\"\n                >\n                  <UserCheck className=\"w-4 h-4 mr-2\" />\n                  Convert to Client\n                </Button>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <AlertDialog open={showConvertDialog} onOpenChange={setShowConvertDialog}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Convert Lead to Client</AlertDialogTitle>\n            <AlertDialogDescription>\n              This will create a new client record and mark this lead as converted. This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-convert\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => convertMutation.mutate()}\n              data-testid=\"button-confirm-convert\"\n            >\n              Convert to Client\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":8709},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/pages/invoices/list.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport type { Invoice } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { StatusBadge } from '@/components/ui/status-badge';\nimport { Eye, DollarSign } from 'lucide-react';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { format } from 'date-fns';\n\nexport default function InvoicesList() {\n  const [, setLocation] = useLocation();\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n\n  const { data: invoices, isLoading } = useQuery<Invoice[]>({\n    queryKey: ['/api/invoices'],\n  });\n\n  const filteredInvoices = invoices?.filter((invoice) => {\n    const matchesStatus = statusFilter === 'all' || invoice.status === statusFilter;\n    return matchesStatus;\n  }) || [];\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-page-title\">Invoices</h1>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Manage and track invoices and payments\n          </p>\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-full md:w-48\" data-testid=\"select-status-filter\">\n              <SelectValue placeholder=\"Filter by status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Statuses</SelectItem>\n              <SelectItem value=\"Generated\">Generated</SelectItem>\n              <SelectItem value=\"Sent\">Sent</SelectItem>\n              <SelectItem value=\"Paid\">Paid</SelectItem>\n              <SelectItem value=\"Partially Paid\">Partially Paid</SelectItem>\n              <SelectItem value=\"Overdue\">Overdue</SelectItem>\n            </SelectContent>\n          </Select>\n        </CardHeader>\n        <CardContent>\n          <div className=\"border rounded-lg\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Invoice #</TableHead>\n                  <TableHead>Client</TableHead>\n                  <TableHead>Date</TableHead>\n                  <TableHead>Due Date</TableHead>\n                  <TableHead>Amount</TableHead>\n                  <TableHead>Paid Amount</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {isLoading ? (\n                  [...Array(5)].map((_, i) => (\n                    <TableRow key={i}>\n                      <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-32\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-5 w-20\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-8 w-20 ml-auto\" /></TableCell>\n                    </TableRow>\n                  ))\n                ) : filteredInvoices.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={8} className=\"text-center py-12\">\n                      <p className=\"text-sm text-muted-foreground\">No invoices found</p>\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredInvoices.map((invoice) => (\n                    <TableRow key={invoice.id} data-testid={`row-invoice-${invoice.id}`}>\n                      <TableCell className=\"font-mono font-medium text-sm\">{invoice.invoiceNumber}</TableCell>\n                      <TableCell>{invoice.clientName}</TableCell>\n                      <TableCell className=\"text-sm text-muted-foreground\">\n                        {format(new Date(invoice.generatedDate), 'MMM d, yyyy')}\n                      </TableCell>\n                      <TableCell className=\"text-sm text-muted-foreground\">\n                        {format(new Date(invoice.dueDate), 'MMM d, yyyy')}\n                      </TableCell>\n                      <TableCell className=\"font-semibold\">{formatCurrency(invoice.total)}</TableCell>\n                      <TableCell className=\"font-semibold text-green-600 dark:text-green-400\">\n                        {formatCurrency(invoice.paidAmount)}\n                      </TableCell>\n                      <TableCell>\n                        <StatusBadge status={invoice.status} type=\"invoice\" />\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center justify-end gap-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => setLocation(`/invoices/${invoice.id}`)}\n                            data-testid={`button-view-${invoice.id}`}\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6182},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"replit.md":{"content":"# CRM + Accounting Management System\n\nA comprehensive business management application with role-based access control, built with React, TypeScript, Express, and in-memory storage.\n\n## Overview\n\nThis application manages leads, clients, quotations, invoices, and service tickets with six different user roles and permissions.\n\n## Tech Stack\n\n- **Frontend**: React 18, TypeScript, Tailwind CSS, Shadcn UI, Wouter (routing), TanStack Query, Chart.js\n- **Backend**: Express.js, Node.js\n- **Storage**: In-memory JavaScript (MemStorage)\n- **Charts**: Chart.js with react-chartjs-2\n\n## User Roles & Credentials\n\n| Role | Username | Password | Access Level |\n|------|----------|----------|--------------|\n| Admin | admin | admin123 | Full system access |\n| Sales Manager | manager | manager123 | Leads, Clients, Quotations |\n| Sales Executive | exec | exec123 | Assigned Leads, Quotations |\n| Accountant | accountant | acc123 | Quotations, Invoices |\n| Engineer | engineer | eng123 | Tickets |\n| Client | client | client123 | Own Quotations, Invoices, Tickets |\n\n## Features\n\n### Authentication\n- Session-based login with role-based access control\n- Protected routes based on user permissions\n- Persistent login state in localStorage\n\n### Dashboard\n- Role-specific metrics and charts\n- Summary cards (Leads, Clients, Quotations, Revenue, Pending Payments)\n- Chart.js visualizations:\n  - Pie chart: Lead status distribution\n  - Bar chart: Quotation status breakdown\n  - Line chart: Monthly revenue trend\n- Recent activities feed (last 10 activities)\n\n### Lead Management\n- Full CRUD operations\n- Lead status workflow: New → In Progress → Converted/Lost\n- Follow-up notes with timeline\n- Convert lead to client functionality\n- Assignment to sales executives\n- Search and filter capabilities\n\n### Client Management\n- Client list with search\n- Client detail pages with:\n  - Contact information\n  - Transaction history (quotations & invoices)\n  - Service tickets\n  - Total revenue calculation\n- Quick actions to create quotations and tickets\n\n### Quotation Management\n- Dynamic line item creation with auto-calculations\n- 18% tax rate (configurable)\n- Status workflow: Draft → Pending → Approved/Rejected\n- Role-based approval system (Manager/Admin can approve)\n- Professional quotation detail view\n- Generate invoice from approved quotation\n\n### Invoice Management\n- Auto-generation from approved quotations\n- Invoice number format: INV-YYYY-###\n- Status tracking: Generated, Sent, Paid, Overdue, Partially Paid\n- Payment recording with multiple payment methods\n- Professional invoice layout\n\n### Service Ticket System\n- Ticket creation with priority levels (Low, Medium, High, Critical)\n- Status workflow: Open → In Progress → Resolved → Closed\n- Assignment to engineers\n- Activity timeline with notes\n- Filter by status and priority\n\n## Architecture\n\n### Frontend Structure\n- `/client/src/pages` - Page components\n- `/client/src/components` - Reusable UI components\n- `/client/src/lib` - Utilities and contexts\n- `/shared` - Shared types and schemas\n\n### Backend Structure\n- `/server/routes.ts` - API routes\n- `/server/storage.ts` - In-memory storage implementation\n- `/shared/schema.ts` - Zod schemas and TypeScript types\n\n### Data Model\nAll entities use Zod schemas for validation:\n- Users (with roles)\n- Leads (with notes and conversion tracking)\n- Clients (with revenue aggregation)\n- Quotations (with line items and approval workflow)\n- Invoices (with payment tracking)\n- Tickets (with priority and timeline)\n- Activities (audit log)\n\n## Running the Application\n\nThe workflow \"Start application\" runs `npm run dev` which:\n1. Starts Express backend on the configured port\n2. Starts Vite dev server for frontend\n3. Serves everything on the same port\n\n## Sample Data\n\nPre-populated data includes:\n- 10 Leads (various statuses and assignments)\n- 5 Clients (converted from leads)\n- 8 Quotations (Draft, Pending, Approved, Rejected)\n- 5 Invoices (Generated, Sent, Paid)\n- 6 Tickets (Open, In Progress, Resolved, Closed)\n- Activity logs for all entities\n\n## Recent Changes\n\n- 2025-10-29: Initial application setup with complete frontend components and schema definitions\n- Role-based navigation and permissions implemented\n- Chart.js integration for dashboard analytics\n- Professional quotation and invoice layouts\n- Complete CRUD operations for all entities\n","size_bytes":4360},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect } from 'wouter';\nimport { queryClient } from './lib/queryClient';\nimport { QueryClientProvider } from '@tanstack/react-query';\nimport { Toaster } from '@/components/ui/toaster';\nimport { TooltipProvider } from '@/components/ui/tooltip';\nimport { AuthProvider, useAuth } from '@/lib/auth-context';\nimport { SidebarProvider, SidebarTrigger } from '@/components/ui/sidebar';\nimport { AppSidebar } from '@/components/app-sidebar';\nimport { ThemeToggle } from '@/components/theme-toggle';\n\nimport Login from '@/pages/login';\nimport Dashboard from '@/pages/dashboard';\nimport LeadsList from '@/pages/leads/list';\nimport LeadForm from '@/pages/leads/form';\nimport LeadDetail from '@/pages/leads/detail';\nimport ClientsList from '@/pages/clients/list';\nimport ClientDetail from '@/pages/clients/detail';\nimport QuotationsList from '@/pages/quotations/list';\nimport QuotationForm from '@/pages/quotations/form';\nimport QuotationDetail from '@/pages/quotations/detail';\nimport InvoicesList from '@/pages/invoices/list';\nimport TicketsList from '@/pages/tickets/list';\nimport NotFound from '@/pages/not-found';\n\nfunction ProtectedRoute({ component: Component }: { component: React.ComponentType }) {\n  const { isAuthenticated } = useAuth();\n  \n  if (!isAuthenticated) {\n    return <Redirect to=\"/login\" />;\n  }\n  \n  return <Component />;\n}\n\nfunction Router() {\n  const { isAuthenticated } = useAuth();\n\n  if (!isAuthenticated) {\n    return (\n      <Switch>\n        <Route path=\"/login\" component={Login} />\n        <Route path=\"/:rest*\">\n          <Redirect to=\"/login\" />\n        </Route>\n      </Switch>\n    );\n  }\n\n  const style = {\n    '--sidebar-width': '16rem',\n    '--sidebar-width-icon': '3rem',\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n        <div className=\"flex flex-col flex-1 overflow-hidden\">\n          <header className=\"flex items-center justify-between px-6 py-3 border-b bg-background\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n            <ThemeToggle />\n          </header>\n          <main className=\"flex-1 overflow-auto p-6 md:p-8\">\n            <Switch>\n              <Route path=\"/\">\n                <Redirect to=\"/dashboard\" />\n              </Route>\n              <Route path=\"/dashboard\" component={Dashboard} />\n              <Route path=\"/leads\" component={LeadsList} />\n              <Route path=\"/leads/new\" component={LeadForm} />\n              <Route path=\"/leads/:id/edit\" component={LeadForm} />\n              <Route path=\"/leads/:id\" component={LeadDetail} />\n              <Route path=\"/clients/:id\" component={ClientDetail} />\n              <Route path=\"/clients\" component={ClientsList} />\n              <Route path=\"/quotations/new\" component={QuotationForm} />\n              <Route path=\"/quotations/:id/edit\" component={QuotationForm} />\n              <Route path=\"/quotations/:id\" component={QuotationDetail} />\n              <Route path=\"/quotations\" component={QuotationsList} />\n              <Route path=\"/invoices\" component={InvoicesList} />\n              <Route path=\"/tickets\" component={TicketsList} />\n              <Route component={NotFound} />\n            </Switch>\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n","size_bytes":3613},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/pages/quotations/form.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useForm, useFieldArray } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useLocation, useParams } from 'wouter';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { insertQuotationSchema, type InsertQuotation, type Quotation, type Client } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { ArrowLeft, Plus, Trash2 } from 'lucide-react';\n\nexport default function QuotationForm() {\n  const params = useParams();\n  const quotationId = params.id ? parseInt(params.id) : null;\n  const isEditing = quotationId !== null;\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const { data: quotation, isLoading: quotationLoading } = useQuery<Quotation>({\n    queryKey: ['/api/quotations', quotationId],\n    enabled: isEditing,\n  });\n\n  const { data: clients } = useQuery<Client[]>({\n    queryKey: ['/api/clients'],\n  });\n\n  const form = useForm<InsertQuotation>({\n    resolver: zodResolver(insertQuotationSchema),\n    defaultValues: {\n      clientId: 0,\n      items: [{ description: '', quantity: 1, unitPrice: 0, amount: 0 }],\n      taxRate: 18,\n      status: 'Draft',\n      createdBy: '',\n      createdDate: new Date().toISOString().split('T')[0],\n      validUntil: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      notes: '',\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: 'items',\n  });\n\n  useEffect(() => {\n    if (quotation && isEditing) {\n      form.reset({\n        clientId: quotation.clientId,\n        items: quotation.items,\n        taxRate: quotation.taxRate,\n        status: quotation.status,\n        createdBy: quotation.createdBy,\n        createdDate: quotation.createdDate,\n        validUntil: quotation.validUntil,\n        notes: quotation.notes,\n      });\n    }\n  }, [quotation, isEditing, form]);\n\n  const items = form.watch('items');\n\n  useEffect(() => {\n    items.forEach((item, index) => {\n      const amount = item.quantity * item.unitPrice;\n      if (item.amount !== amount) {\n        form.setValue(`items.${index}.amount`, amount);\n      }\n    });\n  }, [items, form]);\n\n  const saveMutation = useMutation({\n    mutationFn: async (data: InsertQuotation) => {\n      if (isEditing) {\n        return apiRequest('PATCH', `/api/quotations/${quotationId}`, data);\n      }\n      return apiRequest('POST', '/api/quotations', data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/quotations'] });\n      toast({\n        title: isEditing ? 'Quotation updated' : 'Quotation created',\n        description: `Quotation has been successfully ${isEditing ? 'updated' : 'created'}.`,\n      });\n      setLocation('/quotations');\n    },\n  });\n\n  const submitMutation = useMutation({\n    mutationFn: async (data: InsertQuotation) => {\n      if (isEditing) {\n        return apiRequest('POST', `/api/quotations/${quotationId}/submit`, data);\n      }\n      const newData = { ...data, status: 'Pending' as const };\n      return apiRequest('POST', '/api/quotations', newData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/quotations'] });\n      toast({\n        title: 'Quotation submitted',\n        description: 'Quotation has been submitted for approval.',\n      });\n      setLocation('/quotations');\n    },\n  });\n\n  const onSaveDraft = (data: InsertQuotation) => {\n    saveMutation.mutate({ ...data, status: 'Draft' });\n  };\n\n  const onSubmitForApproval = (data: InsertQuotation) => {\n    submitMutation.mutate(data);\n  };\n\n  const subtotal = items.reduce((sum, item) => sum + item.amount, 0);\n  const taxAmount = subtotal * (form.watch('taxRate') / 100);\n  const total = subtotal + taxAmount;\n\n  if (quotationLoading && isEditing) {\n    return <div className=\"flex items-center justify-center min-h-[400px]\">Loading...</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <Button variant=\"ghost\" size=\"icon\" onClick={() => setLocation('/quotations')} data-testid=\"button-back\">\n          <ArrowLeft className=\"w-4 h-4\" />\n        </Button>\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-page-title\">\n            {isEditing ? 'Edit Quotation' : 'New Quotation'}\n          </h1>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            {isEditing ? 'Update quotation details' : 'Create a new quotation for a client'}\n          </p>\n        </div>\n      </div>\n\n      <Card className=\"max-w-5xl\">\n        <CardHeader>\n          <CardTitle>Quotation Details</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"clientId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Client *</FormLabel>\n                      <Select onValueChange={(value) => field.onChange(parseInt(value))} value={field.value?.toString()}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-client\">\n                            <SelectValue placeholder=\"Select client\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {clients?.map((client) => (\n                            <SelectItem key={client.id} value={client.id.toString()}>\n                              {client.name} - {client.company}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"validUntil\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Valid Until</FormLabel>\n                      <FormControl>\n                        <Input {...field} type=\"date\" data-testid=\"input-valid-until\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"font-semibold\">Line Items</h3>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => append({ description: '', quantity: 1, unitPrice: 0, amount: 0 })}\n                    data-testid=\"button-add-item\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    Add Item\n                  </Button>\n                </div>\n\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  {fields.map((field, index) => (\n                    <div key={field.id} className=\"grid grid-cols-12 gap-3 items-start\">\n                      <div className=\"col-span-5\">\n                        <FormField\n                          control={form.control}\n                          name={`items.${index}.description`}\n                          render={({ field }) => (\n                            <FormItem>\n                              {index === 0 && <FormLabel>Description</FormLabel>}\n                              <FormControl>\n                                <Input {...field} placeholder=\"Service description\" data-testid={`input-description-${index}`} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <div className=\"col-span-2\">\n                        <FormField\n                          control={form.control}\n                          name={`items.${index}.quantity`}\n                          render={({ field }) => (\n                            <FormItem>\n                              {index === 0 && <FormLabel>Qty</FormLabel>}\n                              <FormControl>\n                                <Input\n                                  {...field}\n                                  type=\"number\"\n                                  min=\"1\"\n                                  onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                                  data-testid={`input-quantity-${index}`}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <div className=\"col-span-2\">\n                        <FormField\n                          control={form.control}\n                          name={`items.${index}.unitPrice`}\n                          render={({ field }) => (\n                            <FormItem>\n                              {index === 0 && <FormLabel>Unit Price</FormLabel>}\n                              <FormControl>\n                                <Input\n                                  {...field}\n                                  type=\"number\"\n                                  min=\"0\"\n                                  step=\"0.01\"\n                                  onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                                  data-testid={`input-unit-price-${index}`}\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <div className=\"col-span-2\">\n                        <FormField\n                          control={form.control}\n                          name={`items.${index}.amount`}\n                          render={({ field }) => (\n                            <FormItem>\n                              {index === 0 && <FormLabel>Amount</FormLabel>}\n                              <FormControl>\n                                <Input {...field} type=\"number\" disabled className=\"bg-muted\" data-testid={`text-amount-${index}`} />\n                              </FormControl>\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                      <div className=\"col-span-1 flex items-end\">\n                        {index === 0 && <div className=\"h-9\" />}\n                        {fields.length > 1 && (\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => remove(index)}\n                            data-testid={`button-remove-item-${index}`}\n                          >\n                            <Trash2 className=\"w-4 h-4 text-destructive\" />\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"flex justify-end\">\n                <div className=\"w-full max-w-xs space-y-2 border rounded-lg p-4\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Subtotal:</span>\n                    <span className=\"font-medium\" data-testid=\"text-subtotal\">${subtotal.toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Tax (18%):</span>\n                    <span className=\"font-medium\" data-testid=\"text-tax\">${taxAmount.toFixed(2)}</span>\n                  </div>\n                  <div className=\"flex justify-between text-lg font-bold pt-2 border-t\">\n                    <span>Total:</span>\n                    <span data-testid=\"text-total\">${total.toFixed(2)}</span>\n                  </div>\n                </div>\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notes / Terms</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} rows={3} placeholder=\"Additional terms and conditions...\" data-testid=\"textarea-notes\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex items-center gap-3 justify-end pt-4 border-t\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setLocation('/quotations')}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={form.handleSubmit(onSaveDraft)}\n                  disabled={saveMutation.isPending}\n                  data-testid=\"button-save-draft\"\n                >\n                  {saveMutation.isPending ? 'Saving...' : 'Save as Draft'}\n                </Button>\n                <Button\n                  type=\"button\"\n                  onClick={form.handleSubmit(onSubmitForApproval)}\n                  disabled={submitMutation.isPending}\n                  data-testid=\"button-submit\"\n                >\n                  {submitMutation.isPending ? 'Submitting...' : 'Submit for Approval'}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":14820},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 220 13% 13%;\n\n  --border: 220 13% 91%;\n\n  --card: 220 13% 98%;\n\n  --card-foreground: 220 13% 13%;\n\n  --card-border: 220 13% 94%;\n\n  --sidebar: 220 13% 96%;\n\n  --sidebar-foreground: 220 13% 13%;\n\n  --sidebar-border: 220 13% 92%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 220 13% 93%;\n\n  --sidebar-accent-foreground: 220 13% 13%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 220 13% 95%;\n\n  --popover-foreground: 220 13% 13%;\n\n  --popover-border: 220 13% 91%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 220 13% 92%;\n\n  --secondary-foreground: 220 13% 13%;\n\n  --muted: 220 9% 94%;\n\n  --muted-foreground: 220 9% 38%;\n\n  --accent: 220 11% 93%;\n\n  --accent-foreground: 220 11% 13%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 220 13% 82%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 60%;\n  --chart-2: 142 76% 36%;\n  --chart-3: 271 91% 65%;\n  --chart-4: 35 92% 55%;\n  --chart-5: 340 82% 52%;\n\n  --font-sans: Inter, system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 13% 13% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 13% 13% / 0.08);\n  --shadow-sm: 0px 2px 4px -1px hsl(220 13% 13% / 0.06), 0px 1px 2px -1px hsl(220 13% 13% / 0.08);\n  --shadow: 0px 4px 6px -1px hsl(220 13% 13% / 0.08), 0px 2px 4px -2px hsl(220 13% 13% / 0.06);\n  --shadow-md: 0px 6px 8px -2px hsl(220 13% 13% / 0.08), 0px 4px 6px -2px hsl(220 13% 13% / 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 13% 13% / 0.10), 0px 4px 6px -4px hsl(220 13% 13% / 0.08);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 13% 13% / 0.12), 0px 8px 10px -6px hsl(220 13% 13% / 0.08);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 13% 13% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 13% 9%;\n\n  --foreground: 220 13% 98%;\n\n  --border: 220 13% 17%;\n\n  --card: 220 13% 11%;\n\n  --card-foreground: 220 13% 98%;\n\n  --card-border: 220 13% 15%;\n\n  --sidebar: 220 13% 13%;\n\n  --sidebar-foreground: 220 13% 98%;\n\n  --sidebar-border: 220 13% 17%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 0 0% 100%;\n\n  --sidebar-accent: 220 13% 16%;\n\n  --sidebar-accent-foreground: 220 13% 98%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 220 13% 14%;\n\n  --popover-foreground: 220 13% 98%;\n\n  --popover-border: 220 13% 18%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 0 0% 100%;\n\n  --secondary: 220 13% 17%;\n\n  --secondary-foreground: 220 13% 98%;\n\n  --muted: 220 9% 15%;\n\n  --muted-foreground: 220 9% 68%;\n\n  --accent: 220 11% 16%;\n\n  --accent-foreground: 220 11% 98%;\n\n  --destructive: 0 84% 60%;\n\n  --destructive-foreground: 0 0% 100%;\n\n  --input: 220 13% 28%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 70%;\n  --chart-2: 142 76% 56%;\n  --chart-3: 271 91% 75%;\n  --chart-4: 35 92% 65%;\n  --chart-5: 340 82% 62%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.15);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.20);\n  --shadow-sm: 0px 2px 4px -1px hsl(0 0% 0% / 0.18), 0px 1px 2px -1px hsl(0 0% 0% / 0.20);\n  --shadow: 0px 4px 6px -1px hsl(0 0% 0% / 0.22), 0px 2px 4px -2px hsl(0 0% 0% / 0.18);\n  --shadow-md: 0px 6px 8px -2px hsl(0 0% 0% / 0.24), 0px 4px 6px -2px hsl(0 0% 0% / 0.20);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.30), 0px 4px 6px -4px hsl(0 0% 0% / 0.24);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.35), 0px 8px 10px -6px hsl(0 0% 0% / 0.24);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.50);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11196},"server/init-data.ts":{"content":"import { storage } from './storage';\n\nexport async function initializeSampleData() {\n  // Check if data already exists\n  const existingLeads = await storage.getAllLeads();\n  if (existingLeads.length > 0) {\n    console.log('Sample data already initialized');\n    return;\n  }\n\n  console.log('Initializing sample data...');\n\n  // Create 10 Leads\n  const leadData = [\n    { name: 'John Smith', email: 'john.smith@techcorp.com', phone: '+1-555-0101', company: 'TechCorp Inc', source: 'Website', status: 'New', assignedTo: 'exec', createdDate: '2025-10-15' },\n    { name: 'Sarah Johnson', email: 'sarah.j@innovate.com', phone: '+1-555-0102', company: 'Innovate Solutions', source: 'Referral', status: 'In Progress', assignedTo: 'exec', createdDate: '2025-10-16' },\n    { name: 'Michael Brown', email: 'mbrown@buildco.com', phone: '+1-555-0103', company: 'BuildCo Ltd', source: 'Cold Call', status: 'In Progress', assignedTo: 'exec', createdDate: '2025-10-18' },\n    { name: 'Emily Davis', email: 'emily.d@startupx.io', phone: '+1-555-0104', company: 'StartupX', source: 'Social Media', status: 'Converted', assignedTo: 'exec', createdDate: '2025-10-20' },\n    { name: 'Robert Wilson', email: 'rwilson@megasoft.com', phone: '+1-555-0105', company: 'MegaSoft Corp', source: 'Website', status: 'Converted', assignedTo: 'manager', createdDate: '2025-10-21' },\n    { name: 'Jennifer Martinez', email: 'jen.m@cloudsys.com', phone: '+1-555-0106', company: 'CloudSys Technologies', source: 'Referral', status: 'New', assignedTo: 'exec', createdDate: '2025-10-22' },\n    { name: 'David Lee', email: 'david.lee@dataflow.com', phone: '+1-555-0107', company: 'DataFlow Analytics', source: 'Website', status: 'In Progress', assignedTo: 'manager', createdDate: '2025-10-23' },\n    { name: 'Lisa Anderson', email: 'landerson@webdev.io', phone: '+1-555-0108', company: 'WebDev Studio', source: 'Cold Call', status: 'Lost', assignedTo: 'exec', createdDate: '2025-10-24' },\n    { name: 'James Taylor', email: 'jtaylor@enterprise.com', phone: '+1-555-0109', company: 'Enterprise Solutions', source: 'Social Media', status: 'New', assignedTo: 'exec', createdDate: '2025-10-25' },\n    { name: 'Maria Garcia', email: 'maria.g@biztech.com', phone: '+1-555-0110', company: 'BizTech Consulting', source: 'Referral', status: 'In Progress', assignedTo: 'manager', createdDate: '2025-10-26' },\n  ];\n\n  for (const lead of leadData) {\n    await storage.createLead({\n      ...lead,\n      source: lead.source as any,\n      status: lead.status as any,\n      notes: [\n        { text: 'Initial contact made', timestamp: `${lead.createdDate}T10:00:00Z`, user: lead.assignedTo },\n      ],\n    });\n  }\n\n  console.log('Created 10 leads');\n\n  // Convert 3 leads to clients (only 2 have Converted status initially)\n  const leads = await storage.getAllLeads();\n  const leadsToConvert = leads.filter(l => l.status === 'Converted');\n  console.log(`Converting ${leadsToConvert.length} leads to clients`);\n  \n  for (const lead of leadsToConvert) {\n    await storage.convertLeadToClient(lead.id);\n  }\n\n  // Create 3 more clients directly to have total of 5\n  await storage.createClient({\n    name: 'Patricia White',\n    email: 'pwhite@globaltech.com',\n    phone: '+1-555-0111',\n    company: 'GlobalTech Industries',\n    address: '100 Business Park Dr, Suite 200, San Francisco, CA 94107',\n    createdDate: '2025-09-15',\n  });\n\n  await storage.createClient({\n    name: 'Thomas Clark',\n    email: 'tclark@innovateinc.com',\n    phone: '+1-555-0112',\n    company: 'Innovate Inc',\n    address: '250 Tech Center, Floor 5, Austin, TX 78701',\n    createdDate: '2025-09-20',\n  });\n\n  await storage.createClient({\n    name: 'Angela Roberts',\n    email: 'aroberts@futuretech.com',\n    phone: '+1-555-0113',\n    company: 'FutureTech Solutions',\n    address: '500 Innovation Blvd, Seattle, WA 98101',\n    createdDate: '2025-09-25',\n  });\n\n  console.log('Created clients');\n\n  // Get all clients for quotations\n  const clients = await storage.getAllClients();\n  console.log(`Found ${clients.length} clients for quotations`);\n\n  // Create 8 Quotations\n  const quotations = [\n    {\n      clientId: clients[0].id,\n      items: [\n        { description: 'Web Development - Custom Portal', quantity: 1, unitPrice: 15000, amount: 15000 },\n        { description: 'SEO Optimization Package', quantity: 6, unitPrice: 800, amount: 4800 },\n      ],\n      taxRate: 18,\n      status: 'Draft' as const,\n      createdBy: 'exec',\n      createdDate: '2025-10-25',\n      validUntil: '2025-11-25',\n      notes: 'Standard payment terms: Net 30',\n    },\n    {\n      clientId: clients[1].id,\n      items: [\n        { description: 'Mobile App Development', quantity: 1, unitPrice: 25000, amount: 25000 },\n        { description: 'Backend API Integration', quantity: 1, unitPrice: 8000, amount: 8000 },\n      ],\n      taxRate: 18,\n      status: 'Pending' as const,\n      createdBy: 'exec',\n      createdDate: '2025-10-26',\n      validUntil: '2025-11-26',\n      notes: 'Includes 3 months support',\n    },\n    {\n      clientId: clients[2].id,\n      items: [\n        { description: 'Cloud Infrastructure Setup', quantity: 1, unitPrice: 12000, amount: 12000 },\n        { description: 'Security Audit', quantity: 1, unitPrice: 5000, amount: 5000 },\n      ],\n      taxRate: 18,\n      status: 'Approved' as const,\n      createdBy: 'manager',\n      createdDate: '2025-10-20',\n      validUntil: '2025-11-20',\n      notes: 'Priority project',\n    },\n    {\n      clientId: clients[3].id,\n      items: [\n        { description: 'Digital Marketing Campaign', quantity: 3, unitPrice: 2500, amount: 7500 },\n        { description: 'Content Creation', quantity: 10, unitPrice: 300, amount: 3000 },\n      ],\n      taxRate: 18,\n      status: 'Approved' as const,\n      createdBy: 'exec',\n      createdDate: '2025-10-18',\n      validUntil: '2025-11-18',\n      notes: 'Quarterly package',\n    },\n    {\n      clientId: clients[4].id,\n      items: [\n        { description: 'CRM Implementation', quantity: 1, unitPrice: 18000, amount: 18000 },\n        { description: 'Training Sessions', quantity: 5, unitPrice: 800, amount: 4000 },\n      ],\n      taxRate: 18,\n      status: 'Approved' as const,\n      createdBy: 'manager',\n      createdDate: '2025-10-22',\n      validUntil: '2025-11-22',\n      notes: 'Includes onboarding',\n    },\n    {\n      clientId: clients[0].id,\n      items: [\n        { description: 'Website Redesign', quantity: 1, unitPrice: 8000, amount: 8000 },\n      ],\n      taxRate: 18,\n      status: 'Draft' as const,\n      createdBy: 'exec',\n      createdDate: '2025-10-27',\n      validUntil: '2025-11-27',\n      notes: 'Modern responsive design',\n    },\n    {\n      clientId: clients[2].id,\n      items: [\n        { description: 'E-commerce Platform', quantity: 1, unitPrice: 30000, amount: 30000 },\n        { description: 'Payment Gateway Integration', quantity: 1, unitPrice: 3000, amount: 3000 },\n      ],\n      taxRate: 18,\n      status: 'Pending' as const,\n      createdBy: 'exec',\n      createdDate: '2025-10-28',\n      validUntil: '2025-11-28',\n      notes: 'Full featured online store',\n    },\n    {\n      clientId: clients[1].id,\n      items: [\n        { description: 'Data Analytics Dashboard', quantity: 1, unitPrice: 14000, amount: 14000 },\n      ],\n      taxRate: 18,\n      status: 'Rejected' as const,\n      createdBy: 'exec',\n      createdDate: '2025-10-15',\n      validUntil: '2025-11-15',\n      notes: 'Custom reporting',\n    },\n  ];\n\n  for (const quot of quotations) {\n    const created = await storage.createQuotation(quot);\n    if (quot.status === 'Approved') {\n      await storage.approveQuotation(created.id, 'manager');\n    } else if (quot.status === 'Pending') {\n      await storage.updateQuotation(created.id, { status: 'Pending' });\n    } else if (quot.status === 'Rejected') {\n      await storage.rejectQuotation(created.id);\n    }\n  }\n\n  console.log('Created 8 quotations');\n\n  // Generate 5 Invoices from approved quotations\n  const allQuotations = await storage.getAllQuotations();\n  const approvedQuotations = allQuotations.filter(q => q.status === 'Approved').slice(0, 5);\n  \n  for (let i = 0; i < approvedQuotations.length; i++) {\n    const quot = approvedQuotations[i];\n    const dueDate = new Date('2025-11-27');\n    \n    const invoice = await storage.createInvoice({\n      quotationId: quot.id,\n      clientId: quot.clientId,\n      items: quot.items,\n      status: i < 2 ? 'Generated' : i < 3 ? 'Sent' : 'Paid',\n      generatedDate: '2025-10-27',\n      dueDate: dueDate.toISOString().split('T')[0],\n      paidAmount: 0,\n      notes: quot.notes,\n    });\n\n    if (i >= 2 && i < 3) {\n      await storage.markInvoiceAsSent(invoice.id);\n    }\n    \n    if (i >= 3) {\n      await storage.recordPayment(invoice.id, {\n        paymentDate: '2025-10-28',\n        paymentAmount: invoice.total,\n        paymentMethod: 'Bank Transfer',\n        transactionRef: `TXN${Math.random().toString(36).substr(2, 9).toUpperCase()}`,\n        notes: 'Payment received in full',\n      });\n    }\n  }\n\n  console.log('Created 5 invoices');\n\n  // Create 6 Tickets\n  const tickets = [\n    {\n      clientId: clients[0].id,\n      title: 'Server Setup Required',\n      description: 'Need server configuration and deployment for new application',\n      priority: 'High' as const,\n      status: 'Open' as const,\n      assignedTo: 'engineer',\n      createdDate: '2025-10-26',\n      createdBy: 'admin',\n      notes: [\n        { text: 'Ticket created', timestamp: '2025-10-26T09:00:00Z', user: 'admin' },\n      ],\n    },\n    {\n      clientId: clients[1].id,\n      title: 'Email Integration Issue',\n      description: 'SMTP configuration not working properly',\n      priority: 'Medium' as const,\n      status: 'In Progress' as const,\n      assignedTo: 'engineer',\n      createdDate: '2025-10-25',\n      createdBy: 'admin',\n      notes: [\n        { text: 'Started investigating', timestamp: '2025-10-25T14:30:00Z', user: 'engineer' },\n        { text: 'Found configuration issue', timestamp: '2025-10-26T10:15:00Z', user: 'engineer' },\n      ],\n    },\n    {\n      clientId: clients[2].id,\n      title: 'Database Performance Optimization',\n      description: 'Queries are running slow, need optimization',\n      priority: 'Critical' as const,\n      status: 'In Progress' as const,\n      assignedTo: 'engineer',\n      createdDate: '2025-10-24',\n      createdBy: 'client',\n      notes: [\n        { text: 'Analysis in progress', timestamp: '2025-10-24T16:00:00Z', user: 'engineer' },\n      ],\n    },\n    {\n      clientId: clients[3].id,\n      title: 'Feature Request: Export to PDF',\n      description: 'Add ability to export reports to PDF format',\n      priority: 'Low' as const,\n      status: 'Resolved' as const,\n      assignedTo: 'engineer',\n      createdDate: '2025-10-20',\n      createdBy: 'admin',\n      notes: [\n        { text: 'Feature implemented', timestamp: '2025-10-23T11:00:00Z', user: 'engineer' },\n        { text: 'Deployed to production', timestamp: '2025-10-24T09:00:00Z', user: 'engineer' },\n      ],\n    },\n    {\n      clientId: clients[4].id,\n      title: 'SSL Certificate Renewal',\n      description: 'SSL certificate expiring soon, needs renewal',\n      priority: 'High' as const,\n      status: 'Resolved' as const,\n      assignedTo: 'engineer',\n      createdDate: '2025-10-18',\n      createdBy: 'admin',\n      notes: [\n        { text: 'Certificate renewed', timestamp: '2025-10-19T10:00:00Z', user: 'engineer' },\n      ],\n    },\n    {\n      clientId: clients[0].id,\n      title: 'Backup System Check',\n      description: 'Regular monthly backup system verification',\n      priority: 'Medium' as const,\n      status: 'Closed' as const,\n      assignedTo: 'engineer',\n      createdDate: '2025-10-15',\n      createdBy: 'admin',\n      notes: [\n        { text: 'Verification completed', timestamp: '2025-10-16T14:00:00Z', user: 'engineer' },\n        { text: 'All systems operational', timestamp: '2025-10-16T15:00:00Z', user: 'engineer' },\n      ],\n    },\n  ];\n\n  for (const ticket of tickets) {\n    const created = await storage.createTicket({\n      ...ticket,\n      notes: ticket.notes,\n    });\n    \n    if (ticket.status !== 'Open') {\n      await storage.updateTicketStatus(created.id, ticket.status);\n    }\n  }\n\n  console.log('Created 6 tickets');\n  console.log('Sample data initialization complete!');\n}\n","size_bytes":12316},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/app-sidebar.tsx":{"content":"import { useAuth } from '@/lib/auth-context';\nimport { useLocation } from 'wouter';\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from '@/components/ui/sidebar';\nimport { \n  LayoutDashboard, \n  Users, \n  UserPlus, \n  FileText, \n  Receipt, \n  Ticket,\n  Building2,\n  LogOut\n} from 'lucide-react';\nimport { Badge } from '@/components/ui/badge';\nimport { getRoleDisplayName } from '@/lib/role-permissions';\nimport { Button } from '@/components/ui/button';\n\nexport function AppSidebar() {\n  const { user, logout } = useAuth();\n  const [location] = useLocation();\n\n  if (!user) return null;\n\n  const getMenuItems = () => {\n    const items = [];\n\n    items.push({ title: 'Dashboard', url: '/dashboard', icon: LayoutDashboard });\n\n    if (['admin', 'manager', 'exec'].includes(user.role)) {\n      items.push({ title: user.role === 'exec' ? 'My Leads' : 'Leads', url: '/leads', icon: UserPlus });\n      items.push({ title: 'Clients', url: '/clients', icon: Users });\n    }\n\n    if (['admin', 'manager', 'exec', 'accountant'].includes(user.role)) {\n      items.push({ title: 'Quotations', url: '/quotations', icon: FileText });\n    }\n\n    if (['admin', 'accountant'].includes(user.role)) {\n      items.push({ title: 'Invoices', url: '/invoices', icon: Receipt });\n    }\n\n    if (['admin', 'engineer'].includes(user.role)) {\n      items.push({ \n        title: user.role === 'engineer' ? 'My Tickets' : 'Service Tickets', \n        url: '/tickets', \n        icon: Ticket \n      });\n    }\n\n    if (user.role === 'client') {\n      items.push({ title: 'My Quotations', url: '/quotations', icon: FileText });\n      items.push({ title: 'My Invoices', url: '/invoices', icon: Receipt });\n      items.push({ title: 'My Tickets', url: '/tickets', icon: Ticket });\n    }\n\n    return items;\n  };\n\n  const menuItems = getMenuItems();\n\n  return (\n    <Sidebar>\n      <SidebarHeader className=\"border-b px-6 py-4\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n            <Building2 className=\"w-5 h-5 text-primary-foreground\" />\n          </div>\n          <div className=\"flex-1 min-w-0\">\n            <h2 className=\"font-semibold text-sm truncate\">CRM & Accounting</h2>\n            <p className=\"text-xs text-muted-foreground truncate\">Management System</p>\n          </div>\n        </div>\n      </SidebarHeader>\n      \n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel className=\"text-xs uppercase tracking-wide px-3\">\n            Navigation\n          </SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => {\n                const isActive = location === item.url || \n                  (item.url !== '/dashboard' && location.startsWith(item.url));\n                \n                return (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton \n                      asChild\n                      className={isActive ? 'bg-sidebar-accent' : ''}\n                      data-testid={`nav-${item.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      <a href={item.url}>\n                        <item.icon className=\"w-4 h-4\" />\n                        <span>{item.title}</span>\n                      </a>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                );\n              })}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n\n      <SidebarFooter className=\"border-t p-4\">\n        <div className=\"space-y-3\">\n          <div className=\"px-3 py-2 rounded-lg bg-muted/50\">\n            <p className=\"text-sm font-medium truncate\" data-testid=\"text-user-name\">\n              {user.name}\n            </p>\n            <Badge variant=\"secondary\" className=\"mt-1 text-xs\" data-testid=\"badge-user-role\">\n              {getRoleDisplayName(user.role)}\n            </Badge>\n          </div>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            className=\"w-full justify-start\"\n            onClick={logout}\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"w-4 h-4 mr-2\" />\n            Logout\n          </Button>\n        </div>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":4497},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// ==================== USER SCHEMA ====================\nexport const userSchema = z.object({\n  id: z.string(),\n  username: z.string(),\n  password: z.string(),\n  role: z.enum([\"admin\", \"manager\", \"exec\", \"accountant\", \"engineer\", \"client\"]),\n  name: z.string(),\n});\n\nexport const insertUserSchema = userSchema.omit({ id: true });\n\nexport type User = z.infer<typeof userSchema>;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\n// ==================== LEAD SCHEMA ====================\nexport const leadNoteSchema = z.object({\n  text: z.string(),\n  timestamp: z.string(),\n  user: z.string(),\n});\n\nexport const leadSchema = z.object({\n  id: z.number(),\n  name: z.string(),\n  email: z.string().email(),\n  phone: z.string(),\n  company: z.string(),\n  source: z.enum([\"Website\", \"Referral\", \"Cold Call\", \"Social Media\"]),\n  status: z.enum([\"New\", \"In Progress\", \"Converted\", \"Lost\"]),\n  assignedTo: z.string(),\n  assignedToName: z.string(),\n  createdDate: z.string(),\n  notes: z.array(leadNoteSchema),\n  convertedToClientId: z.number().nullable(),\n});\n\nexport const insertLeadSchema = leadSchema.omit({ id: true, assignedToName: true, notes: true, convertedToClientId: true }).extend({\n  notes: z.array(leadNoteSchema).optional(),\n  convertedToClientId: z.number().nullable().optional(),\n});\n\nexport type Lead = z.infer<typeof leadSchema>;\nexport type InsertLead = z.infer<typeof insertLeadSchema>;\nexport type LeadNote = z.infer<typeof leadNoteSchema>;\n\n// ==================== CLIENT SCHEMA ====================\nexport const clientSchema = z.object({\n  id: z.number(),\n  name: z.string(),\n  email: z.string().email(),\n  phone: z.string(),\n  company: z.string(),\n  address: z.string(),\n  createdDate: z.string(),\n  totalRevenue: z.number(),\n  leadId: z.number().nullable(),\n});\n\nexport const insertClientSchema = clientSchema.omit({ id: true, totalRevenue: true }).extend({\n  totalRevenue: z.number().optional(),\n});\n\nexport type Client = z.infer<typeof clientSchema>;\nexport type InsertClient = z.infer<typeof insertClientSchema>;\n\n// ==================== QUOTATION SCHEMA ====================\nexport const quotationItemSchema = z.object({\n  description: z.string(),\n  quantity: z.number().min(1),\n  unitPrice: z.number().min(0),\n  amount: z.number(),\n});\n\nexport const quotationSchema = z.object({\n  id: z.number(),\n  quotationNumber: z.string(),\n  clientId: z.number(),\n  clientName: z.string(),\n  items: z.array(quotationItemSchema),\n  subtotal: z.number(),\n  taxRate: z.number(),\n  taxAmount: z.number(),\n  total: z.number(),\n  status: z.enum([\"Draft\", \"Pending\", \"Approved\", \"Rejected\"]),\n  createdBy: z.string(),\n  createdByName: z.string(),\n  createdDate: z.string(),\n  validUntil: z.string(),\n  approvedBy: z.string().nullable(),\n  approvedDate: z.string().nullable(),\n  notes: z.string(),\n});\n\nexport const insertQuotationSchema = quotationSchema.omit({ \n  id: true, \n  quotationNumber: true, \n  clientName: true, \n  subtotal: true,\n  taxAmount: true,\n  total: true,\n  createdByName: true,\n  approvedBy: true,\n  approvedDate: true \n}).extend({\n  approvedBy: z.string().nullable().optional(),\n  approvedDate: z.string().nullable().optional(),\n});\n\nexport type Quotation = z.infer<typeof quotationSchema>;\nexport type InsertQuotation = z.infer<typeof insertQuotationSchema>;\nexport type QuotationItem = z.infer<typeof quotationItemSchema>;\n\n// ==================== INVOICE SCHEMA ====================\nexport const invoiceSchema = z.object({\n  id: z.number(),\n  invoiceNumber: z.string(),\n  quotationId: z.number(),\n  clientId: z.number(),\n  clientName: z.string(),\n  clientAddress: z.string(),\n  items: z.array(quotationItemSchema),\n  subtotal: z.number(),\n  taxAmount: z.number(),\n  total: z.number(),\n  status: z.enum([\"Generated\", \"Sent\", \"Paid\", \"Overdue\", \"Partially Paid\"]),\n  generatedDate: z.string(),\n  sentDate: z.string().nullable(),\n  dueDate: z.string(),\n  paidDate: z.string().nullable(),\n  paidAmount: z.number(),\n  paymentMethod: z.string().nullable(),\n  transactionRef: z.string().nullable(),\n  notes: z.string(),\n});\n\nexport const insertInvoiceSchema = invoiceSchema.omit({ \n  id: true, \n  invoiceNumber: true,\n  clientName: true,\n  clientAddress: true,\n  subtotal: true,\n  taxAmount: true,\n  total: true,\n  sentDate: true,\n  paidDate: true,\n  paymentMethod: true,\n  transactionRef: true\n}).extend({\n  sentDate: z.string().nullable().optional(),\n  paidDate: z.string().nullable().optional(),\n  paymentMethod: z.string().nullable().optional(),\n  transactionRef: z.string().nullable().optional(),\n});\n\nexport type Invoice = z.infer<typeof invoiceSchema>;\nexport type InsertInvoice = z.infer<typeof insertInvoiceSchema>;\n\n// ==================== PAYMENT SCHEMA ====================\nexport const paymentSchema = z.object({\n  paymentDate: z.string(),\n  paymentAmount: z.number().min(0),\n  paymentMethod: z.enum([\"Cash\", \"Check\", \"Bank Transfer\", \"Credit Card\", \"UPI\"]),\n  transactionRef: z.string(),\n  notes: z.string(),\n});\n\nexport type Payment = z.infer<typeof paymentSchema>;\n\n// ==================== TICKET SCHEMA ====================\nexport const ticketNoteSchema = z.object({\n  text: z.string(),\n  timestamp: z.string(),\n  user: z.string(),\n});\n\nexport const ticketSchema = z.object({\n  id: z.number(),\n  ticketNumber: z.string(),\n  clientId: z.number(),\n  clientName: z.string(),\n  title: z.string(),\n  description: z.string(),\n  priority: z.enum([\"Low\", \"Medium\", \"High\", \"Critical\"]),\n  status: z.enum([\"Open\", \"In Progress\", \"Resolved\", \"Closed\"]),\n  assignedTo: z.string(),\n  assignedToName: z.string(),\n  createdDate: z.string(),\n  createdBy: z.string(),\n  notes: z.array(ticketNoteSchema),\n  resolvedDate: z.string().nullable(),\n  closedDate: z.string().nullable(),\n});\n\nexport const insertTicketSchema = ticketSchema.omit({ \n  id: true, \n  ticketNumber: true, \n  clientName: true,\n  assignedToName: true,\n  notes: true,\n  resolvedDate: true,\n  closedDate: true\n}).extend({\n  notes: z.array(ticketNoteSchema).optional(),\n  resolvedDate: z.string().nullable().optional(),\n  closedDate: z.string().nullable().optional(),\n});\n\nexport type Ticket = z.infer<typeof ticketSchema>;\nexport type InsertTicket = z.infer<typeof insertTicketSchema>;\nexport type TicketNote = z.infer<typeof ticketNoteSchema>;\n\n// ==================== ACTIVITY SCHEMA ====================\nexport const activitySchema = z.object({\n  id: z.number(),\n  timestamp: z.string(),\n  user: z.string(),\n  action: z.string(),\n  entity: z.string(),\n  entityId: z.number().nullable(),\n});\n\nexport const insertActivitySchema = activitySchema.omit({ id: true });\n\nexport type Activity = z.infer<typeof activitySchema>;\nexport type InsertActivity = z.infer<typeof insertActivitySchema>;\n\n// ==================== DASHBOARD METRICS ====================\nexport const dashboardMetricsSchema = z.object({\n  totalLeads: z.number(),\n  totalClients: z.number(),\n  totalQuotations: z.number(),\n  totalRevenue: z.number(),\n  pendingPayments: z.number(),\n  leadStatusDistribution: z.object({\n    New: z.number(),\n    \"In Progress\": z.number(),\n    Converted: z.number(),\n    Lost: z.number(),\n  }),\n  quotationStatusDistribution: z.object({\n    Draft: z.number(),\n    Pending: z.number(),\n    Approved: z.number(),\n    Rejected: z.number(),\n  }),\n  monthlyRevenue: z.array(z.object({\n    month: z.string(),\n    revenue: z.number(),\n  })),\n});\n\nexport type DashboardMetrics = z.infer<typeof dashboardMetricsSchema>;\n","size_bytes":7423},"client/src/lib/role-permissions.ts":{"content":"import { User } from '@shared/schema';\n\nexport function canAccessLeads(user: User | null): boolean {\n  if (!user) return false;\n  return ['admin', 'manager', 'exec'].includes(user.role);\n}\n\nexport function canAccessClients(user: User | null): boolean {\n  if (!user) return false;\n  return ['admin', 'manager', 'exec'].includes(user.role);\n}\n\nexport function canAccessQuotations(user: User | null): boolean {\n  if (!user) return false;\n  return ['admin', 'manager', 'exec', 'accountant'].includes(user.role);\n}\n\nexport function canAccessInvoices(user: User | null): boolean {\n  if (!user) return false;\n  return ['admin', 'accountant'].includes(user.role);\n}\n\nexport function canAccessTickets(user: User | null): boolean {\n  if (!user) return false;\n  return ['admin', 'engineer'].includes(user.role);\n}\n\nexport function canApproveQuotations(user: User | null): boolean {\n  if (!user) return false;\n  return ['admin', 'manager'].includes(user.role);\n}\n\nexport function canGenerateInvoices(user: User | null): boolean {\n  if (!user) return false;\n  return ['admin', 'accountant'].includes(user.role);\n}\n\nexport function canConvertLeads(user: User | null): boolean {\n  if (!user) return false;\n  return ['admin', 'manager', 'exec'].includes(user.role);\n}\n\nexport function getRoleDisplayName(role: string): string {\n  const roleNames: Record<string, string> = {\n    admin: 'Administrator',\n    manager: 'Sales Manager',\n    exec: 'Sales Executive',\n    accountant: 'Accountant',\n    engineer: 'Engineer',\n    client: 'Client',\n  };\n  return roleNames[role] || role;\n}\n","size_bytes":1564},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/pages/clients/list.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport type { Client } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { Search, Eye, Building2, Mail, Phone, DollarSign } from 'lucide-react';\nimport { Skeleton } from '@/components/ui/skeleton';\n\nexport default function ClientsList() {\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const { data: clients, isLoading } = useQuery<Client[]>({\n    queryKey: ['/api/clients'],\n  });\n\n  const filteredClients = clients?.filter((client) => {\n    const matchesSearch = client.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      client.company.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesSearch;\n  }) || [];\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-page-title\">Clients</h1>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Manage your client relationships\n          </p>\n        </div>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Search by name or company...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search\"\n            />\n          </div>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i}>\n                  <CardContent className=\"p-6\">\n                    <Skeleton className=\"h-24 w-full\" />\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : filteredClients.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <p className=\"text-sm text-muted-foreground\">No clients found</p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {filteredClients.map((client) => (\n                <Card \n                  key={client.id} \n                  className=\"hover-elevate cursor-pointer transition-all\"\n                  onClick={() => setLocation(`/clients/${client.id}`)}\n                  data-testid={`card-client-${client.id}`}\n                >\n                  <CardContent className=\"p-6 space-y-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1 min-w-0\">\n                        <h3 className=\"font-semibold text-lg truncate\" data-testid={`text-client-name-${client.id}`}>\n                          {client.name}\n                        </h3>\n                        <p className=\"text-sm text-muted-foreground flex items-center gap-1 mt-1 truncate\">\n                          <Building2 className=\"w-3 h-3 flex-shrink-0\" />\n                          {client.company}\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex items-center gap-2 text-muted-foreground\">\n                        <Mail className=\"w-3 h-3 flex-shrink-0\" />\n                        <span className=\"truncate\">{client.email}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2 text-muted-foreground\">\n                        <Phone className=\"w-3 h-3 flex-shrink-0\" />\n                        <span className=\"truncate\">{client.phone}</span>\n                      </div>\n                    </div>\n\n                    <div className=\"pt-3 border-t flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <DollarSign className=\"w-4 h-4 text-green-600 dark:text-green-400\" />\n                        <span className=\"font-semibold text-green-600 dark:text-green-400\">\n                          {formatCurrency(client.totalRevenue)}\n                        </span>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          setLocation(`/clients/${client.id}`);\n                        }}\n                        data-testid={`button-view-${client.id}`}\n                      >\n                        <Eye className=\"w-4 h-4 mr-1\" />\n                        View\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5446},"design_guidelines.md":{"content":"# CRM + Accounting Management System - Design Guidelines\n\n## Design Principles\n\n**Approach:** Modern Business Application System - prioritizing data density, efficient workflows, and professional polish.\n\n**Core Principles:**\n1. Clarity Over Decoration - scannable interfaces with clear hierarchy\n2. Consistent Density - balance readability with efficiency\n3. Professional Polish - enterprise-grade visual quality\n4. Role-Aware Design - consistency across user contexts\n\n---\n\n## Typography\n\n**Font Stack:**\n- Primary: Inter (Google Fonts) - UI, tables, body text\n- Monospace: JetBrains Mono (Google Fonts) - IDs, invoice/quotation numbers\n\n**Type Scale:**\n```\nDisplay (Dashboards):  text-3xl, font-bold, tracking-tight\nPage Headers:          text-2xl, font-semibold\nSection Headers:       text-xl, font-semibold\nCard Titles:           text-lg, font-medium\nBody Text:             text-base, font-normal\nSecondary Text:        text-sm, font-normal\nTable Headers:         text-xs, font-semibold, uppercase, tracking-wide\nTable Data:            text-sm, font-normal\nLabels:                text-sm, font-medium\nHelper Text:           text-xs, font-normal\n```\n\n**Weights:** 400 (normal), 500 (medium), 600 (semibold), 700 (bold)\n\n---\n\n## Layout & Spacing\n\n**Spacing Scale:** Use 2, 3, 4, 6, 8, 12, 16, 20, 24 units consistently\n\n**Common Applications:**\n- Component padding: `p-4` or `p-6`\n- Card padding: `p-6`\n- Section spacing: `space-y-6` or `space-y-8`\n- Form gaps: `space-y-4`\n- Table cells: `px-4 py-3`\n- Buttons: `px-4 py-2` (medium), `px-6 py-3` (large)\n- Icon-text: `gap-2`\n\n**Page Structure:**\n```\nFixed Sidebar (w-64) + Main Content (flex-1)\n├─ Navbar: h-16, border-b, px-6\n├─ Page Container: p-6 to p-8, max-w-7xl mx-auto\n   ├─ Page Header: mb-6, title + actions (right-aligned)\n   ├─ Content Area: space-y-6\n   └─ Pagination (if needed)\n```\n\n**Grid Systems:**\n- Dashboard: `grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6`\n- Features: `grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4`\n- Forms: `grid grid-cols-1 md:grid-cols-2 gap-4`\n- Client Cards: `grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6`\n\n**Container Widths:** Dashboard/Tables: max-w-7xl, Forms: max-w-4xl, Details: max-w-5xl\n\n---\n\n## Components\n\n### Navigation\n\n**Sidebar:**\n- Fixed, w-64, h-screen, border-r\n- Logo: h-16, px-6, border-b\n- Menu: py-4, px-3, items with `px-3 py-2 rounded-lg gap-3`\n- Role badge: px-6 py-4, border-t (bottom)\n- Mobile: Drawer overlay with backdrop\n\n**Navbar:**\n- h-16, border-b, px-6\n- Hamburger (mobile), user dropdown with avatar (w-8 h-8, rounded-full)\n\n### Dashboard\n\n**Summary Cards:**\n```\np-6, rounded-lg, border, shadow-sm\n├─ Icon: w-12 h-12, rounded-lg, centered\n├─ Label: text-sm, font-medium\n├─ Value: text-2xl, font-bold, mt-2\n└─ Trend: text-xs, mt-1 (with arrow icon)\n```\n\n**Chart Cards:**\n- p-6, rounded-lg, border, shadow-sm\n- Title: text-lg, font-semibold, mb-4\n- Chart: h-64 to h-80 or aspect-video\n- Use Chart.js with minimal styling\n\n**Activity Feed:**\n- List: divide-y, border, rounded-lg\n- Items: p-4, flex gap-3\n  - Icon/Avatar: w-8 h-8, rounded-full\n  - Content: flex-1, text-sm (action), text-xs (meta)\n\n### Tables\n\n**Structure:**\n```\nContainer: overflow-x-auto, border, rounded-lg, shadow-sm\n├─ Table: w-full, text-sm\n├─ Header: border-b, px-4 py-3, text-xs uppercase\n├─ Rows: border-b, hover state, px-4 py-3\n└─ Pagination: px-4 py-3, border-t, flex justify-between\n```\n\n**Features:**\n- Search: w-full md:max-w-sm, px-3 py-2, border, rounded-lg\n- Filters: inline-flex gap-2 above table\n- Actions: icon buttons (w-8 h-8) in rows\n- IDs/numbers: whitespace-nowrap, font-mono\n\n### Status Badges\n\n**Base:** `inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium`\n\n**Categories:** Lead Status, Quotation Status, Invoice Status (Generated/Sent/Paid/Overdue/Partially Paid), Ticket Priority, Ticket Status\n\n### Forms\n\n**Layout:**\n```\nContainer: max-w-2xl to max-w-4xl\n├─ Card: p-6, border, rounded-lg, shadow-sm\n├─ Fields: space-y-4\n└─ Actions: flex gap-3 justify-end\n```\n\n**Fields:**\n- Label: block, text-sm, font-medium, mb-1 (asterisk for required)\n- Input: w-full, px-3 py-2, border, rounded-lg, text-sm\n- Helper/Error: text-xs, mt-1\n- Focus: ring states\n\n**Line Items (Quotations):**\n- Table layout: Description (flex-1), Quantity (w-24), Unit Price (w-32), Amount (w-32), Actions (w-12)\n- Auto-calculated amounts\n- \"Add Item\" button below\n\n**Actions:**\n- Primary: px-6 py-2.5, rounded-lg, font-medium\n- Secondary: px-6 py-2.5, rounded-lg, border, font-medium\n- Loading: disabled with spinner\n\n### Detail Pages\n\n**Header:**\n```\nflex justify-between items-start mb-6\n├─ Left: text-2xl font-bold + subtitle\n└─ Right: action buttons (flex gap-2)\n```\n\n**Quotation/Invoice:**\n- Number: text-lg, font-mono, font-semibold\n- Client details: grid grid-cols-2 gap-4\n- Line items: full-width table\n- Totals: max-w-xs ml-auto, flex justify-between rows\n\n**Timeline:**\n- Vertical with left border, pl-6 pb-6 items\n- Timestamp dot: absolute left-0, w-3 h-3, rounded-full, border-4\n- Add note form at bottom\n\n### Modals\n\n**Structure:**\n```\nBackdrop: fixed inset-0\nModal: fixed inset-0 flex items-center justify-center p-4\n├─ Content: max-w-md to max-w-2xl, rounded-lg, shadow-xl\n   ├─ Header: px-6 py-4, border-b (title + close button)\n   ├─ Body: p-6\n   └─ Footer: px-6 py-4, border-t, flex justify-end gap-3\n```\n\n**Sizes:** Form: max-w-md, Confirmation: max-w-sm, Detail: max-w-2xl\n\n### Buttons\n\n**Variants:**\n- Primary: px-4 py-2, rounded-lg, font-medium, shadow-sm\n- Secondary: px-4 py-2, rounded-lg, border, font-medium\n- Ghost: px-4 py-2, rounded-lg (hover background only)\n- Icon: w-8 h-8 to w-10 h-10, rounded, centered\n\n**Sizes:** Small: px-3 py-1.5 text-sm, Medium: px-4 py-2 text-sm, Large: px-6 py-3 text-base\n\n**States:** Hover (subtle transform/shadow), Loading (disabled + spinner), Disabled (opacity-50, cursor-not-allowed)\n\n### Cards\n\n**Standard:** `p-6 border rounded-lg shadow-sm`\n- Header: pb-4 border-b mb-4 (when needed)\n- Title: text-lg font-semibold\n- Actions: flex gap-2 justify-end\n\n**Clickable:** Add hover:shadow-md, cursor-pointer\n\n---\n\n## Responsive Design\n\n**Breakpoints:** Mobile <640px, Tablet 640-1024px, Desktop 1024px+\n\n**Mobile:**\n- Sidebar → overlay drawer (hamburger toggle)\n- Tables → horizontal scroll\n- Dashboard → grid-cols-1\n- Forms → single column\n- Navbar → condensed\n\n**Tablet:**\n- Dashboard → 2-column grid\n- Forms → 2-column where appropriate\n\n---\n\n## User Feedback\n\n**Toast Notifications:**\n- Position: fixed top-4 right-4 z-50\n- Container: max-w-sm p-4 rounded-lg shadow-lg border-l-4\n- Content: flex gap-3 (icon w-5 h-5 + text-sm)\n- Auto-dismiss: 4-5s\n- Variants: Success, Error, Warning, Info\n\n**Loading:**\n- Full page: fixed inset-0 centered with backdrop\n- Inline: animate-spin w-4 h-4 to w-6 h-6\n- Skeleton: animate-pulse for tables/cards\n\n**Empty States:**\n- Centered: text-center py-12\n- Icon: w-12 h-12 mx-auto mb-4\n- Title: text-lg font-medium\n- Description: text-sm max-w-sm mx-auto mt-2\n- Action: mt-4\n\n**Confirmation Dialogs:**\n- Modal with warning icon\n- Clear description\n- Cancel (secondary) + Confirm (primary/danger)\n\n---\n\n## Images & Assets\n\n**Dashboard:** Abstract business/analytics illustrations for empty states (centered)\n\n**Avatars:** Professional placeholders (initials or generic icons), w-12 h-12 or w-16 h-16, rounded-full\n\n**No Heroes:** Focus on functional interfaces, not marketing sections","size_bytes":7518},"client/src/pages/leads/list.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport type { Lead } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from '@/components/ui/alert-dialog';\nimport { StatusBadge } from '@/components/ui/status-badge';\nimport { Plus, Search, Eye, Pencil, Trash2, UserCheck } from 'lucide-react';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { format } from 'date-fns';\n\nexport default function LeadsList() {\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [deleteLeadId, setDeleteLeadId] = useState<number | null>(null);\n  const { toast } = useToast();\n\n  const { data: leads, isLoading } = useQuery<Lead[]>({\n    queryKey: ['/api/leads'],\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return apiRequest('DELETE', `/api/leads/${id}`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/leads'] });\n      toast({\n        title: 'Lead deleted',\n        description: 'Lead has been successfully deleted.',\n      });\n      setDeleteLeadId(null);\n    },\n    onError: () => {\n      toast({\n        title: 'Error',\n        description: 'Failed to delete lead.',\n        variant: 'destructive',\n      });\n    },\n  });\n\n  const filteredLeads = leads?.filter((lead) => {\n    const matchesSearch = lead.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      lead.company.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || lead.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  }) || [];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-page-title\">Leads</h1>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Manage and track your sales leads\n          </p>\n        </div>\n        <Button onClick={() => setLocation('/leads/new')} data-testid=\"button-create-lead\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Lead\n        </Button>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n              <Input\n                placeholder=\"Search by name or company...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search\"\n              />\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-full md:w-48\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Statuses</SelectItem>\n                <SelectItem value=\"New\">New</SelectItem>\n                <SelectItem value=\"In Progress\">In Progress</SelectItem>\n                <SelectItem value=\"Converted\">Converted</SelectItem>\n                <SelectItem value=\"Lost\">Lost</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"border rounded-lg\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Name</TableHead>\n                  <TableHead>Company</TableHead>\n                  <TableHead>Email</TableHead>\n                  <TableHead>Phone</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Assigned To</TableHead>\n                  <TableHead>Created Date</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {isLoading ? (\n                  [...Array(5)].map((_, i) => (\n                    <TableRow key={i}>\n                      <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-32\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-40\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-28\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-5 w-20\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-8 w-32 ml-auto\" /></TableCell>\n                    </TableRow>\n                  ))\n                ) : filteredLeads.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={8} className=\"text-center py-12\">\n                      <p className=\"text-sm text-muted-foreground\">No leads found</p>\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredLeads.map((lead) => (\n                    <TableRow key={lead.id} data-testid={`row-lead-${lead.id}`}>\n                      <TableCell className=\"font-medium\">{lead.name}</TableCell>\n                      <TableCell>{lead.company}</TableCell>\n                      <TableCell className=\"text-sm text-muted-foreground\">{lead.email}</TableCell>\n                      <TableCell className=\"text-sm text-muted-foreground\">{lead.phone}</TableCell>\n                      <TableCell>\n                        <StatusBadge status={lead.status} type=\"lead\" />\n                      </TableCell>\n                      <TableCell className=\"text-sm\">{lead.assignedToName}</TableCell>\n                      <TableCell className=\"text-sm text-muted-foreground\">\n                        {format(new Date(lead.createdDate), 'MMM d, yyyy')}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center justify-end gap-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => setLocation(`/leads/${lead.id}`)}\n                            data-testid={`button-view-${lead.id}`}\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => setLocation(`/leads/${lead.id}/edit`)}\n                            data-testid={`button-edit-${lead.id}`}\n                          >\n                            <Pencil className=\"w-4 h-4\" />\n                          </Button>\n                          {lead.status !== 'Converted' && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              onClick={() => setDeleteLeadId(lead.id)}\n                              data-testid={`button-delete-${lead.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </Button>\n                          )}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      <AlertDialog open={deleteLeadId !== null} onOpenChange={() => setDeleteLeadId(null)}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Are you sure?</AlertDialogTitle>\n            <AlertDialogDescription>\n              This action cannot be undone. This will permanently delete the lead.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => deleteLeadId && deleteMutation.mutate(deleteLeadId)}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              Delete\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":9441},"client/src/pages/quotations/detail.tsx":{"content":"import { useParams, useLocation } from 'wouter';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { useAuth } from '@/lib/auth-context';\nimport type { Quotation } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { StatusBadge } from '@/components/ui/status-badge';\nimport { ArrowLeft, Check, X, FileText } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { format } from 'date-fns';\nimport { canApproveQuotations, canGenerateInvoices } from '@/lib/role-permissions';\n\nexport default function QuotationDetail() {\n  const params = useParams();\n  const quotationId = parseInt(params.id!);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const { data: quotation, isLoading } = useQuery<Quotation>({\n    queryKey: ['/api/quotations', quotationId],\n  });\n\n  const approveMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest('POST', `/api/quotations/${quotationId}/approve`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/quotations', quotationId] });\n      toast({\n        title: 'Quotation approved',\n        description: 'Quotation has been successfully approved.',\n      });\n    },\n  });\n\n  const rejectMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest('POST', `/api/quotations/${quotationId}/reject`, undefined);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/quotations', quotationId] });\n      toast({\n        title: 'Quotation rejected',\n        description: 'Quotation has been rejected.',\n      });\n    },\n  });\n\n  const generateInvoiceMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest('POST', `/api/quotations/${quotationId}/generate-invoice`, undefined);\n    },\n    onSuccess: (invoice: any) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/invoices'] });\n      toast({\n        title: 'Invoice generated',\n        description: 'Invoice has been successfully generated.',\n      });\n      setLocation(`/invoices/${invoice.id}`);\n    },\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n    }).format(amount);\n  };\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center min-h-[400px]\">Loading...</div>;\n  }\n\n  if (!quotation) {\n    return <div className=\"text-center py-12\">Quotation not found</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <Button variant=\"ghost\" size=\"icon\" onClick={() => setLocation('/quotations')} data-testid=\"button-back\">\n          <ArrowLeft className=\"w-4 h-4\" />\n        </Button>\n        <div className=\"flex-1\">\n          <h1 className=\"text-2xl font-bold font-mono tracking-tight\" data-testid=\"text-quotation-number\">\n            {quotation.quotationNumber}\n          </h1>\n          <p className=\"text-sm text-muted-foreground mt-1\">Quotation Details</p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          {quotation.status === 'Pending' && canApproveQuotations(user) && (\n            <>\n              <Button\n                onClick={() => approveMutation.mutate()}\n                disabled={approveMutation.isPending}\n                data-testid=\"button-approve\"\n              >\n                <Check className=\"w-4 h-4 mr-2\" />\n                Approve\n              </Button>\n              <Button\n                variant=\"destructive\"\n                onClick={() => rejectMutation.mutate()}\n                disabled={rejectMutation.isPending}\n                data-testid=\"button-reject\"\n              >\n                <X className=\"w-4 h-4 mr-2\" />\n                Reject\n              </Button>\n            </>\n          )}\n          {quotation.status === 'Approved' && canGenerateInvoices(user) && (\n            <Button\n              onClick={() => generateInvoiceMutation.mutate()}\n              disabled={generateInvoiceMutation.isPending}\n              data-testid=\"button-generate-invoice\"\n            >\n              <FileText className=\"w-4 h-4 mr-2\" />\n              Generate Invoice\n            </Button>\n          )}\n        </div>\n      </div>\n\n      <Card className=\"max-w-4xl\">\n        <CardHeader className=\"border-b\">\n          <div className=\"flex items-start justify-between\">\n            <div>\n              <CardTitle className=\"text-3xl mb-2\">QUOTATION</CardTitle>\n              <div className=\"space-y-1\">\n                <p className=\"text-sm\">\n                  <span className=\"font-medium\">Date:</span> {format(new Date(quotation.createdDate), 'MMM d, yyyy')}\n                </p>\n                <p className=\"text-sm\">\n                  <span className=\"font-medium\">Valid Until:</span> {format(new Date(quotation.validUntil), 'MMM d, yyyy')}\n                </p>\n                <div className=\"mt-2\">\n                  <StatusBadge status={quotation.status} type=\"quotation\" />\n                </div>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-lg font-bold font-mono\">{quotation.quotationNumber}</p>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6 pt-6\">\n          <div className=\"grid grid-cols-2 gap-6\">\n            <div>\n              <h3 className=\"font-semibold mb-2\">Bill To:</h3>\n              <div className=\"text-sm space-y-1\">\n                <p className=\"font-medium\">{quotation.clientName}</p>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <h3 className=\"font-semibold mb-2\">Created By:</h3>\n              <div className=\"text-sm space-y-1\">\n                <p>{quotation.createdByName}</p>\n                {quotation.approvedBy && (\n                  <p className=\"text-muted-foreground\">\n                    Approved on {format(new Date(quotation.approvedDate!), 'MMM d, yyyy')}\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"border rounded-lg overflow-hidden\">\n            <table className=\"w-full\">\n              <thead className=\"bg-muted\">\n                <tr>\n                  <th className=\"text-left px-4 py-3 text-sm font-semibold\">Description</th>\n                  <th className=\"text-right px-4 py-3 text-sm font-semibold\">Qty</th>\n                  <th className=\"text-right px-4 py-3 text-sm font-semibold\">Unit Price</th>\n                  <th className=\"text-right px-4 py-3 text-sm font-semibold\">Amount</th>\n                </tr>\n              </thead>\n              <tbody className=\"divide-y\">\n                {quotation.items.map((item, index) => (\n                  <tr key={index}>\n                    <td className=\"px-4 py-3 text-sm\">{item.description}</td>\n                    <td className=\"px-4 py-3 text-sm text-right\">{item.quantity}</td>\n                    <td className=\"px-4 py-3 text-sm text-right\">{formatCurrency(item.unitPrice)}</td>\n                    <td className=\"px-4 py-3 text-sm text-right font-medium\">{formatCurrency(item.amount)}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n\n          <div className=\"flex justify-end\">\n            <div className=\"w-full max-w-xs space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Subtotal:</span>\n                <span className=\"font-medium\">{formatCurrency(quotation.subtotal)}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Tax ({quotation.taxRate}%):</span>\n                <span className=\"font-medium\">{formatCurrency(quotation.taxAmount)}</span>\n              </div>\n              <div className=\"flex justify-between text-xl font-bold pt-2 border-t\">\n                <span>Total:</span>\n                <span data-testid=\"text-total-amount\">{formatCurrency(quotation.total)}</span>\n              </div>\n            </div>\n          </div>\n\n          {quotation.notes && (\n            <div className=\"pt-4 border-t\">\n              <h3 className=\"font-semibold mb-2\">Notes / Terms:</h3>\n              <p className=\"text-sm text-muted-foreground whitespace-pre-wrap\">{quotation.notes}</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8744},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/pages/tickets/list.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '@/lib/auth-context';\nimport type { Ticket } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { StatusBadge } from '@/components/ui/status-badge';\nimport { Plus, Eye } from 'lucide-react';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { format } from 'date-fns';\n\nexport default function TicketsList() {\n  const [, setLocation] = useLocation();\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [priorityFilter, setPriorityFilter] = useState<string>('all');\n  const { user } = useAuth();\n\n  const { data: tickets, isLoading } = useQuery<Ticket[]>({\n    queryKey: ['/api/tickets'],\n  });\n\n  const filteredTickets = tickets?.filter((ticket) => {\n    const matchesStatus = statusFilter === 'all' || ticket.status === statusFilter;\n    const matchesPriority = priorityFilter === 'all' || ticket.priority === priorityFilter;\n    return matchesStatus && matchesPriority;\n  }) || [];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-page-title\">\n            {user?.role === 'engineer' ? 'My Tickets' : 'Service Tickets'}\n          </h1>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Manage and track support tickets\n          </p>\n        </div>\n        {user?.role === 'admin' && (\n          <Button onClick={() => setLocation('/tickets/new')} data-testid=\"button-create-ticket\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            New Ticket\n          </Button>\n        )}\n      </div>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex gap-4\">\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Statuses</SelectItem>\n                <SelectItem value=\"Open\">Open</SelectItem>\n                <SelectItem value=\"In Progress\">In Progress</SelectItem>\n                <SelectItem value=\"Resolved\">Resolved</SelectItem>\n                <SelectItem value=\"Closed\">Closed</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={priorityFilter} onValueChange={setPriorityFilter}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-priority-filter\">\n                <SelectValue placeholder=\"Filter by priority\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Priorities</SelectItem>\n                <SelectItem value=\"Low\">Low</SelectItem>\n                <SelectItem value=\"Medium\">Medium</SelectItem>\n                <SelectItem value=\"High\">High</SelectItem>\n                <SelectItem value=\"Critical\">Critical</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"border rounded-lg\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Ticket #</TableHead>\n                  <TableHead>Client</TableHead>\n                  <TableHead>Title</TableHead>\n                  <TableHead>Priority</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Assigned To</TableHead>\n                  <TableHead>Created Date</TableHead>\n                  <TableHead className=\"text-right\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {isLoading ? (\n                  [...Array(5)].map((_, i) => (\n                    <TableRow key={i}>\n                      <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-32\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-40\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-5 w-20\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-5 w-20\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                      <TableCell><Skeleton className=\"h-8 w-20 ml-auto\" /></TableCell>\n                    </TableRow>\n                  ))\n                ) : filteredTickets.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={8} className=\"text-center py-12\">\n                      <p className=\"text-sm text-muted-foreground\">No tickets found</p>\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredTickets.map((ticket) => (\n                    <TableRow key={ticket.id} data-testid={`row-ticket-${ticket.id}`}>\n                      <TableCell className=\"font-mono font-medium text-sm\">{ticket.ticketNumber}</TableCell>\n                      <TableCell>{ticket.clientName}</TableCell>\n                      <TableCell className=\"max-w-xs truncate\">{ticket.title}</TableCell>\n                      <TableCell>\n                        <StatusBadge status={ticket.priority} type=\"ticket-priority\" />\n                      </TableCell>\n                      <TableCell>\n                        <StatusBadge status={ticket.status} type=\"ticket-status\" />\n                      </TableCell>\n                      <TableCell className=\"text-sm\">{ticket.assignedToName}</TableCell>\n                      <TableCell className=\"text-sm text-muted-foreground\">\n                        {format(new Date(ticket.createdDate), 'MMM d, yyyy')}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center justify-end gap-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => setLocation(`/tickets/${ticket.id}`)}\n                            data-testid={`button-view-${ticket.id}`}\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7041},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/pages/clients/detail.tsx":{"content":"import { useParams, useLocation } from 'wouter';\nimport { useQuery } from '@tanstack/react-query';\nimport type { Client, Quotation, Invoice, Ticket } from '@shared/schema';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ArrowLeft, Plus, FileText, Receipt, Ticket as TicketIcon } from 'lucide-react';\nimport { StatusBadge } from '@/components/ui/status-badge';\nimport { format } from 'date-fns';\n\nexport default function ClientDetail() {\n  const params = useParams();\n  const clientId = parseInt(params.id!);\n  const [, setLocation] = useLocation();\n\n  const { data: client, isLoading } = useQuery<Client>({\n    queryKey: ['/api/clients', clientId],\n  });\n\n  const { data: quotations } = useQuery<Quotation[]>({\n    queryKey: ['/api/quotations', clientId],\n  });\n\n  const { data: invoices } = useQuery<Invoice[]>({\n    queryKey: ['/api/invoices', clientId],\n  });\n\n  const { data: tickets } = useQuery<Ticket[]>({\n    queryKey: ['/api/tickets', clientId],\n  });\n\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  if (isLoading) {\n    return <div className=\"flex items-center justify-center min-h-[400px]\">Loading...</div>;\n  }\n\n  if (!client) {\n    return <div className=\"text-center py-12\">Client not found</div>;\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-4\">\n        <Button variant=\"ghost\" size=\"icon\" onClick={() => setLocation('/clients')} data-testid=\"button-back\">\n          <ArrowLeft className=\"w-4 h-4\" />\n        </Button>\n        <div className=\"flex-1\">\n          <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-client-name\">{client.name}</h1>\n          <p className=\"text-sm text-muted-foreground mt-1\">{client.company}</p>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <div className=\"lg:col-span-2 space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Client Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Email</p>\n                  <p className=\"text-sm mt-1\">{client.email}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Phone</p>\n                  <p className=\"text-sm mt-1\">{client.phone}</p>\n                </div>\n                <div className=\"md:col-span-2\">\n                  <p className=\"text-sm font-medium text-muted-foreground\">Address</p>\n                  <p className=\"text-sm mt-1\">{client.address}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Revenue</p>\n                  <p className=\"text-lg font-semibold text-green-600 dark:text-green-400 mt-1\">\n                    {formatCurrency(client.totalRevenue)}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Client Since</p>\n                  <p className=\"text-sm mt-1\">{format(new Date(client.createdDate), 'MMM d, yyyy')}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Quotations</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {quotations && quotations.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {quotations.map((quotation) => (\n                    <div\n                      key={quotation.id}\n                      className=\"flex items-center justify-between p-3 border rounded-lg hover-elevate cursor-pointer\"\n                      onClick={() => setLocation(`/quotations/${quotation.id}`)}\n                      data-testid={`quotation-${quotation.id}`}\n                    >\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium font-mono text-sm\">{quotation.quotationNumber}</p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          {format(new Date(quotation.createdDate), 'MMM d, yyyy')}\n                        </p>\n                      </div>\n                      <div className=\"flex items-center gap-3\">\n                        <p className=\"font-semibold\">{formatCurrency(quotation.total)}</p>\n                        <StatusBadge status={quotation.status} type=\"quotation\" />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-sm text-muted-foreground text-center py-6\">No quotations yet</p>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Invoices</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {invoices && invoices.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {invoices.map((invoice) => (\n                    <div\n                      key={invoice.id}\n                      className=\"flex items-center justify-between p-3 border rounded-lg hover-elevate cursor-pointer\"\n                      onClick={() => setLocation(`/invoices/${invoice.id}`)}\n                      data-testid={`invoice-${invoice.id}`}\n                    >\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium font-mono text-sm\">{invoice.invoiceNumber}</p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          Due: {format(new Date(invoice.dueDate), 'MMM d, yyyy')}\n                        </p>\n                      </div>\n                      <div className=\"flex items-center gap-3\">\n                        <p className=\"font-semibold\">{formatCurrency(invoice.total)}</p>\n                        <StatusBadge status={invoice.status} type=\"invoice\" />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-sm text-muted-foreground text-center py-6\">No invoices yet</p>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Service Tickets</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {tickets && tickets.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {tickets.map((ticket) => (\n                    <div\n                      key={ticket.id}\n                      className=\"flex items-center justify-between p-3 border rounded-lg hover-elevate cursor-pointer\"\n                      onClick={() => setLocation(`/tickets/${ticket.id}`)}\n                      data-testid={`ticket-${ticket.id}`}\n                    >\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium text-sm\">{ticket.title}</p>\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          {ticket.ticketNumber} • {format(new Date(ticket.createdDate), 'MMM d, yyyy')}\n                        </p>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <StatusBadge status={ticket.priority} type=\"ticket-priority\" />\n                        <StatusBadge status={ticket.status} type=\"ticket-status\" />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-sm text-muted-foreground text-center py-6\">No tickets yet</p>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        <div>\n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Actions</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              <Button\n                variant=\"outline\"\n                className=\"w-full justify-start\"\n                onClick={() => setLocation('/quotations/new')}\n                data-testid=\"button-create-quotation\"\n              >\n                <FileText className=\"w-4 h-4 mr-2\" />\n                Create Quotation\n              </Button>\n              <Button\n                variant=\"outline\"\n                className=\"w-full justify-start\"\n                onClick={() => setLocation('/tickets/new')}\n                data-testid=\"button-create-ticket\"\n              >\n                <TicketIcon className=\"w-4 h-4 mr-2\" />\n                Create Ticket\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9080},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/status-badge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\n\ninterface StatusBadgeProps {\n  status: string;\n  type?: 'lead' | 'quotation' | 'invoice' | 'ticket-status' | 'ticket-priority';\n  className?: string;\n}\n\nexport function StatusBadge({ status, type = 'lead', className }: StatusBadgeProps) {\n  const getVariant = () => {\n    if (type === 'lead') {\n      switch (status) {\n        case 'New': return 'default';\n        case 'In Progress': return 'secondary';\n        case 'Converted': return 'default';\n        case 'Lost': return 'destructive';\n        default: return 'secondary';\n      }\n    }\n    \n    if (type === 'quotation') {\n      switch (status) {\n        case 'Draft': return 'secondary';\n        case 'Pending': return 'secondary';\n        case 'Approved': return 'default';\n        case 'Rejected': return 'destructive';\n        default: return 'secondary';\n      }\n    }\n    \n    if (type === 'invoice') {\n      switch (status) {\n        case 'Generated': return 'default';\n        case 'Sent': return 'secondary';\n        case 'Paid': return 'default';\n        case 'Partially Paid': return 'secondary';\n        case 'Overdue': return 'destructive';\n        default: return 'secondary';\n      }\n    }\n    \n    if (type === 'ticket-status') {\n      switch (status) {\n        case 'Open': return 'default';\n        case 'In Progress': return 'secondary';\n        case 'Resolved': return 'default';\n        case 'Closed': return 'secondary';\n        default: return 'secondary';\n      }\n    }\n    \n    if (type === 'ticket-priority') {\n      switch (status) {\n        case 'Low': return 'secondary';\n        case 'Medium': return 'secondary';\n        case 'High': return 'secondary';\n        case 'Critical': return 'destructive';\n        default: return 'secondary';\n      }\n    }\n    \n    return 'secondary';\n  };\n\n  const getCustomClasses = () => {\n    if (type === 'lead') {\n      switch (status) {\n        case 'New': return 'bg-blue-100 text-blue-700 border-blue-200 dark:bg-blue-950 dark:text-blue-300 dark:border-blue-800';\n        case 'In Progress': return 'bg-yellow-100 text-yellow-700 border-yellow-200 dark:bg-yellow-950 dark:text-yellow-300 dark:border-yellow-800';\n        case 'Converted': return 'bg-green-100 text-green-700 border-green-200 dark:bg-green-950 dark:text-green-300 dark:border-green-800';\n        case 'Lost': return 'bg-red-100 text-red-700 border-red-200 dark:bg-red-950 dark:text-red-300 dark:border-red-800';\n      }\n    }\n    \n    if (type === 'quotation') {\n      switch (status) {\n        case 'Draft': return 'bg-gray-100 text-gray-700 border-gray-200 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-700';\n        case 'Pending': return 'bg-yellow-100 text-yellow-700 border-yellow-200 dark:bg-yellow-950 dark:text-yellow-300 dark:border-yellow-800';\n        case 'Approved': return 'bg-green-100 text-green-700 border-green-200 dark:bg-green-950 dark:text-green-300 dark:border-green-800';\n        case 'Rejected': return 'bg-red-100 text-red-700 border-red-200 dark:bg-red-950 dark:text-red-300 dark:border-red-800';\n      }\n    }\n    \n    if (type === 'invoice') {\n      switch (status) {\n        case 'Generated': return 'bg-blue-100 text-blue-700 border-blue-200 dark:bg-blue-950 dark:text-blue-300 dark:border-blue-800';\n        case 'Sent': return 'bg-yellow-100 text-yellow-700 border-yellow-200 dark:bg-yellow-950 dark:text-yellow-300 dark:border-yellow-800';\n        case 'Paid': return 'bg-green-100 text-green-700 border-green-200 dark:bg-green-950 dark:text-green-300 dark:border-green-800';\n        case 'Partially Paid': return 'bg-amber-100 text-amber-700 border-amber-200 dark:bg-amber-950 dark:text-amber-300 dark:border-amber-800';\n        case 'Overdue': return 'bg-red-100 text-red-700 border-red-200 dark:bg-red-950 dark:text-red-300 dark:border-red-800';\n      }\n    }\n    \n    if (type === 'ticket-status') {\n      switch (status) {\n        case 'Open': return 'bg-blue-100 text-blue-700 border-blue-200 dark:bg-blue-950 dark:text-blue-300 dark:border-blue-800';\n        case 'In Progress': return 'bg-yellow-100 text-yellow-700 border-yellow-200 dark:bg-yellow-950 dark:text-yellow-300 dark:border-yellow-800';\n        case 'Resolved': return 'bg-green-100 text-green-700 border-green-200 dark:bg-green-950 dark:text-green-300 dark:border-green-800';\n        case 'Closed': return 'bg-gray-100 text-gray-700 border-gray-200 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-700';\n      }\n    }\n    \n    if (type === 'ticket-priority') {\n      switch (status) {\n        case 'Low': return 'bg-gray-100 text-gray-700 border-gray-200 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-700';\n        case 'Medium': return 'bg-yellow-100 text-yellow-700 border-yellow-200 dark:bg-yellow-950 dark:text-yellow-300 dark:border-yellow-800';\n        case 'High': return 'bg-orange-100 text-orange-700 border-orange-200 dark:bg-orange-950 dark:text-orange-300 dark:border-orange-800';\n        case 'Critical': return 'bg-red-100 text-red-700 border-red-200 dark:bg-red-950 dark:text-red-300 dark:border-red-800';\n      }\n    }\n    \n    return '';\n  };\n\n  return (\n    <Badge \n      variant={getVariant()}\n      className={cn('border whitespace-nowrap', getCustomClasses(), className)}\n      data-testid={`badge-${type}-${status.toLowerCase().replace(/\\s+/g, '-')}`}\n    >\n      {status}\n    </Badge>\n  );\n}\n","size_bytes":5412},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport type { InsertLead, InsertClient, InsertQuotation, InsertInvoice, InsertTicket, Payment, LeadNote, TicketNote } from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: 'Username and password required' });\n      }\n      \n      const user = await storage.getUserByUsername(username);\n      \n      if (!user) {\n        return res.status(401).json({ message: 'Invalid credentials' });\n      }\n      \n      const passwordMatch = await bcrypt.compare(password, user.password);\n      if (!passwordMatch) {\n        return res.status(401).json({ message: 'Invalid credentials' });\n      }\n      \n      const { password: _, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      res.status(500).json({ message: 'Login failed' });\n    }\n  });\n\n  // Leads\n  app.get('/api/leads', async (req, res) => {\n    try {\n      const leads = await storage.getAllLeads();\n      res.json(leads);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch leads' });\n    }\n  });\n\n  app.get('/api/leads/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const lead = await storage.getLead(id);\n      if (!lead) {\n        return res.status(404).json({ message: 'Lead not found' });\n      }\n      res.json(lead);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch lead' });\n    }\n  });\n\n  app.post('/api/leads', async (req, res) => {\n    try {\n      const leadData: InsertLead = req.body;\n      const lead = await storage.createLead(leadData);\n      res.status(201).json(lead);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to create lead' });\n    }\n  });\n\n  app.patch('/api/leads/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const leadData: Partial<InsertLead> = req.body;\n      const lead = await storage.updateLead(id, leadData);\n      if (!lead) {\n        return res.status(404).json({ message: 'Lead not found' });\n      }\n      res.json(lead);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to update lead' });\n    }\n  });\n\n  app.delete('/api/leads/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const deleted = await storage.deleteLead(id);\n      if (!deleted) {\n        return res.status(404).json({ message: 'Lead not found' });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to delete lead' });\n    }\n  });\n\n  app.post('/api/leads/:id/notes', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { text } = req.body;\n      const note: LeadNote = {\n        text,\n        timestamp: new Date().toISOString(),\n        user: req.body.user || 'system',\n      };\n      const lead = await storage.addLeadNote(id, note);\n      if (!lead) {\n        return res.status(404).json({ message: 'Lead not found' });\n      }\n      res.json(lead);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to add note' });\n    }\n  });\n\n  app.post('/api/leads/:id/convert', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const client = await storage.convertLeadToClient(id);\n      if (!client) {\n        return res.status(404).json({ message: 'Lead not found' });\n      }\n      res.json(client);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to convert lead' });\n    }\n  });\n\n  // Clients\n  app.get('/api/clients', async (req, res) => {\n    try {\n      const clients = await storage.getAllClients();\n      res.json(clients);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch clients' });\n    }\n  });\n\n  app.get('/api/clients/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const client = await storage.getClient(id);\n      if (!client) {\n        return res.status(404).json({ message: 'Client not found' });\n      }\n      res.json(client);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch client' });\n    }\n  });\n\n  app.post('/api/clients', async (req, res) => {\n    try {\n      const clientData: InsertClient = req.body;\n      const client = await storage.createClient(clientData);\n      res.status(201).json(client);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to create client' });\n    }\n  });\n\n  app.patch('/api/clients/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const clientData: Partial<InsertClient> = req.body;\n      const client = await storage.updateClient(id, clientData);\n      if (!client) {\n        return res.status(404).json({ message: 'Client not found' });\n      }\n      res.json(client);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to update client' });\n    }\n  });\n\n  app.delete('/api/clients/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const deleted = await storage.deleteClient(id);\n      if (!deleted) {\n        return res.status(404).json({ message: 'Client not found' });\n      }\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to delete client' });\n    }\n  });\n\n  // Quotations\n  app.get('/api/quotations', async (req, res) => {\n    try {\n      const quotations = await storage.getAllQuotations();\n      const clientId = req.query.clientId ? parseInt(req.query.clientId as string) : null;\n      \n      if (clientId) {\n        const filtered = quotations.filter(q => q.clientId === clientId);\n        return res.json(filtered);\n      }\n      \n      res.json(quotations);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch quotations' });\n    }\n  });\n\n  app.get('/api/quotations/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const quotation = await storage.getQuotation(id);\n      if (!quotation) {\n        return res.status(404).json({ message: 'Quotation not found' });\n      }\n      res.json(quotation);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch quotation' });\n    }\n  });\n\n  app.post('/api/quotations', async (req, res) => {\n    try {\n      const quotationData: InsertQuotation = req.body;\n      const quotation = await storage.createQuotation(quotationData);\n      res.status(201).json(quotation);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to create quotation' });\n    }\n  });\n\n  app.patch('/api/quotations/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const quotationData: Partial<InsertQuotation> = req.body;\n      const quotation = await storage.updateQuotation(id, quotationData);\n      if (!quotation) {\n        return res.status(404).json({ message: 'Quotation not found' });\n      }\n      res.json(quotation);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to update quotation' });\n    }\n  });\n\n  app.post('/api/quotations/:id/approve', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const approvedBy = req.body.approvedBy || 'manager';\n      const quotation = await storage.approveQuotation(id, approvedBy);\n      if (!quotation) {\n        return res.status(404).json({ message: 'Quotation not found' });\n      }\n      res.json(quotation);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to approve quotation' });\n    }\n  });\n\n  app.post('/api/quotations/:id/reject', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const quotation = await storage.rejectQuotation(id);\n      if (!quotation) {\n        return res.status(404).json({ message: 'Quotation not found' });\n      }\n      res.json(quotation);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to reject quotation' });\n    }\n  });\n\n  app.post('/api/quotations/:id/submit', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const quotation = await storage.updateQuotation(id, { status: 'Pending' });\n      if (!quotation) {\n        return res.status(404).json({ message: 'Quotation not found' });\n      }\n      res.json(quotation);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to submit quotation' });\n    }\n  });\n\n  app.post('/api/quotations/:id/generate-invoice', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const quotation = await storage.getQuotation(id);\n      if (!quotation) {\n        return res.status(404).json({ message: 'Quotation not found' });\n      }\n      if (quotation.status !== 'Approved') {\n        return res.status(400).json({ message: 'Quotation must be approved first' });\n      }\n      \n      const dueDate = new Date();\n      dueDate.setDate(dueDate.getDate() + 30);\n      \n      const invoiceData: InsertInvoice = {\n        quotationId: quotation.id,\n        clientId: quotation.clientId,\n        items: quotation.items,\n        status: 'Generated',\n        generatedDate: new Date().toISOString().split('T')[0],\n        dueDate: dueDate.toISOString().split('T')[0],\n        paidAmount: 0,\n        notes: quotation.notes,\n      };\n      \n      const invoice = await storage.createInvoice(invoiceData);\n      res.status(201).json(invoice);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to generate invoice' });\n    }\n  });\n\n  // Invoices\n  app.get('/api/invoices', async (req, res) => {\n    try {\n      const invoices = await storage.getAllInvoices();\n      const clientId = req.query.clientId ? parseInt(req.query.clientId as string) : null;\n      \n      if (clientId) {\n        const filtered = invoices.filter(inv => inv.clientId === clientId);\n        return res.json(filtered);\n      }\n      \n      res.json(invoices);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch invoices' });\n    }\n  });\n\n  app.get('/api/invoices/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const invoice = await storage.getInvoice(id);\n      if (!invoice) {\n        return res.status(404).json({ message: 'Invoice not found' });\n      }\n      res.json(invoice);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch invoice' });\n    }\n  });\n\n  app.post('/api/invoices/:id/record-payment', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const paymentData: Payment = req.body;\n      const invoice = await storage.recordPayment(id, paymentData);\n      if (!invoice) {\n        return res.status(404).json({ message: 'Invoice not found' });\n      }\n      res.json(invoice);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to record payment' });\n    }\n  });\n\n  app.post('/api/invoices/:id/mark-sent', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const invoice = await storage.markInvoiceAsSent(id);\n      if (!invoice) {\n        return res.status(404).json({ message: 'Invoice not found' });\n      }\n      res.json(invoice);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to mark invoice as sent' });\n    }\n  });\n\n  // Tickets\n  app.get('/api/tickets', async (req, res) => {\n    try {\n      const tickets = await storage.getAllTickets();\n      const clientId = req.query.clientId ? parseInt(req.query.clientId as string) : null;\n      \n      if (clientId) {\n        const filtered = tickets.filter(t => t.clientId === clientId);\n        return res.json(filtered);\n      }\n      \n      res.json(tickets);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch tickets' });\n    }\n  });\n\n  app.get('/api/tickets/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const ticket = await storage.getTicket(id);\n      if (!ticket) {\n        return res.status(404).json({ message: 'Ticket not found' });\n      }\n      res.json(ticket);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch ticket' });\n    }\n  });\n\n  app.post('/api/tickets', async (req, res) => {\n    try {\n      const ticketData: InsertTicket = req.body;\n      const ticket = await storage.createTicket(ticketData);\n      res.status(201).json(ticket);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to create ticket' });\n    }\n  });\n\n  app.patch('/api/tickets/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const ticketData: Partial<InsertTicket> = req.body;\n      const ticket = await storage.updateTicket(id, ticketData);\n      if (!ticket) {\n        return res.status(404).json({ message: 'Ticket not found' });\n      }\n      res.json(ticket);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to update ticket' });\n    }\n  });\n\n  app.post('/api/tickets/:id/notes', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { text } = req.body;\n      const note: TicketNote = {\n        text,\n        timestamp: new Date().toISOString(),\n        user: req.body.user || 'system',\n      };\n      const ticket = await storage.addTicketNote(id, note);\n      if (!ticket) {\n        return res.status(404).json({ message: 'Ticket not found' });\n      }\n      res.json(ticket);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to add note' });\n    }\n  });\n\n  app.post('/api/tickets/:id/update-status', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const { status } = req.body;\n      const ticket = await storage.updateTicketStatus(id, status);\n      if (!ticket) {\n        return res.status(404).json({ message: 'Ticket not found' });\n      }\n      res.json(ticket);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to update ticket status' });\n    }\n  });\n\n  // Dashboard\n  app.get('/api/dashboard/metrics', async (req, res) => {\n    try {\n      const metrics = await storage.getDashboardMetrics();\n      res.json(metrics);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch dashboard metrics' });\n    }\n  });\n\n  app.get('/api/dashboard/activities', async (req, res) => {\n    try {\n      const activities = await storage.getAllActivities();\n      res.json(activities);\n    } catch (error) {\n      res.status(500).json({ message: 'Failed to fetch activities' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":14832},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325}},"version":2}